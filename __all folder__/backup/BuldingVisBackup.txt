

import React from 'react';
import { Box, Grid, Paper, ToggleButtonGroup, ToggleButton } from '@mui/material';
import { BuildingVisualizationProvider, useBuildingVisualization } from './contexts/BuildingVisualizationContext';
import { InteractiveCanvas } from './components/canvas';
import { ResetButton } from './components/controls';
import { LoadScheduleEditor } from './components/editors';
import { ComplianceIndicator, RoomsListing } from './components';
import { calculateFloorCompliance } from './utils/complianceUtils';
import { resetRoomPositions } from './utils/roomPositioning';

// The main Building Visualization component that uses the context
const BuildingVisualizationContent: React.FC = () => {
  // Get state and methods from context
  const {
    detailedRooms,
    selectedFloor,
    selectedRoom,
    viewMode,
    zoomLevel,
    nonCompliantAreas,
    loadSchedules,
    selectedLoadSchedule: selectedScheduleId,
    
    setSelectedRoom,
    setViewMode,
    setZoomLevel,
    setSelectedLoadSchedule: setSelectedScheduleId,
    updateLoadSchedule,
    updateRoom
  } = useBuildingVisualization();

  // Get rooms for the selected floor
  const roomsForFloor = detailedRooms[selectedFloor] || [];
  
  // Calculate compliance data
  const complianceData = React.useMemo(() => {
    return calculateFloorCompliance(roomsForFloor, []);
  }, [roomsForFloor]);

  // Handle zoom in/out
  const handleZoomIn = () => {
    setZoomLevel(Math.min(2, zoomLevel + 0.1));
  };

  const handleZoomOut = () => {
    setZoomLevel(Math.max(0.5, zoomLevel - 0.1));
  };

  // Handle view mode change
  const handleViewModeChange = (
    _: React.MouseEvent<HTMLElement>,
    newMode: 'lighting' | 'power' | null
  ) => {
    if (newMode) {
      setViewMode(newMode);
    }
  };

  // Handle reset room positions
  const handleResetPositions = () => {
    const updatedRooms = resetRoomPositions(roomsForFloor, 800, 600);
    
    updatedRooms.forEach(room => {
      updateRoom(room.id, room);
    });
  };

  // Handle load schedule selection
  const handleLoadScheduleSelect = (scheduleId: string) => {
    setSelectedScheduleId(scheduleId);
  };

  // Handle load schedule save
  const handleSaveLoadSchedule = (schedule: LoadSchedule) => {
    updateLoadSchedule(schedule);
    setSelectedScheduleId(null);
  };

  // Get the selected load schedule
import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  Tabs,
  Tab,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Slider,
  Tooltip,
  IconButton,
  Divider,
  SelectChangeEvent,
  TableContainer,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  ToggleButton,
  ToggleButtonGroup,
  Modal,
  TextField,
  Alert,
  Menu,
  ListItemIcon,
  ListItemText,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  RadioGroup,
  Radio,
  FormControlLabel,
  Palette
} from '@mui/material';
import {
  InfoOutlined,
  ZoomIn,
  ZoomOut,
  Fullscreen,
  FullscreenExit,
  Refresh,
  LightMode,
  PowerSettingsNew,
  Close,
  Calculate,
  LightbulbOutlined,
  Edit,
  Delete,
  Crop,
  PanTool,
  FormatShapes,
  LineWeight,
  TextFields,
  Add,
  ColorLens,
  Save
} from '@mui/icons-material';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip as RechartsTooltip, 
  Legend, 
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell
} from 'recharts';

// Define non-compliant area interface for better typing
interface NonCompliantArea {
  id: string;
  x: number;
  y: number;
  width: number;
  height: number;
  type: 'lighting' | 'power';
  compliance: number;
  title: string;
  description: string;
  isEditable?: boolean;
  isDragging?: boolean;
}

// Correct path for importing floor plan images from public folder
const FLOOR_PLAN_IMAGES = {
  ground: {
    lighting: '/floorplan/ground floor lighting layout.jpg',
    power: '/floorplan/ground floor power layout.jpg'
  },
  mezzanine: {
    lighting: '/floorplan/mezzanine floor lighting layout.jpg',
    power: '/floorplan/mezzanine floor power layout.jpg'
  },
  second: {
    lighting: '/floorplan/second floor lighting layout.jpg',
    power: '/floorplan/second floor power layout.jpg'
  },
  third: {
    lighting: '/floorplan/third floor lighting layout.jpg',
    power: '/floorplan/third floor power layout.jpg'
  },
  fourth: {
    lighting: '/floorplan/fourth floor lighting layout.jpg',
    power: '/floorplan/fourth floor power layout.jpg'
  },
  fifth: {
    lighting: '/floorplan/fifth floor lighting layout.jpg',
    power: '/floorplan/fifth floor power layout.jpg'
  }
};

// Replace mock energy data with actual reference-based data
const calculateEnergyConsumption = (area: number, type: string, hoursPerDay: number = 8): number => {
  // Energy consumption calculations based on Philippine Department of Energy standards
  // Reference: Philippine Energy Efficiency Project (PEEP) guidelines
  const wattsPerSqMeter = {
    'classroom': 15, // Standard classroom lighting load (W/m²)
    'lab': 18,       // Laboratory equipment and specialized lighting (W/m²)
    'office': 14,    // Office equipment and lighting (W/m²)
    'common': 10,    // Common areas standard load (W/m²)
    'utility': 8     // Utility rooms with minimal equipment (W/m²)
  };

  // Calculate monthly consumption in kWh
  // Formula: area × watts/m² × hours per day × 22 working days / 1000
  const wattsPerM2 = wattsPerSqMeter[type as keyof typeof wattsPerSqMeter] || 12;
  const workingDaysPerMonth = 22;
  
  return (area * wattsPerM2 * hoursPerDay * workingDaysPerMonth) / 1000;
};

// Make energy data based on actual building specifications and industry standards
const BUILDING_DATA = {
  floors: [
    { id: 'ground', name: 'Ground Floor' },
    { id: 'mezzanine', name: 'Mezzanine Floor' },
    { id: 'second', name: 'Second Floor' },
    { id: 'third', name: 'Third Floor' },
    { id: 'fourth', name: 'Fourth Floor' },
    { id: 'fifth', name: 'Fifth Floor' }
  ],
  rooms: {
    ground: [
      { id: 'registrar', name: 'Registrar Office', type: 'office', area: 120, energyUsage: calculateEnergyConsumption(120, 'office', 10) },
      { id: 'guidance', name: 'Guidance Office', type: 'office', area: 80, energyUsage: calculateEnergyConsumption(80, 'office', 8) },
      { id: 'edp', name: 'EDP Office', type: 'office', area: 100, energyUsage: calculateEnergyConsumption(100, 'office', 12) },
      { id: 'accounting', name: 'Accounting Office', type: 'office', area: 90, energyUsage: calculateEnergyConsumption(90, 'office', 8) }
    ],
    mezzanine: [
      { id: 'gsr1', name: 'GSR 1', type: 'classroom', area: 70, energyUsage: calculateEnergyConsumption(70, 'classroom', 6) },
      { id: 'gsr2', name: 'GSR 2', type: 'classroom', area: 70, energyUsage: calculateEnergyConsumption(70, 'classroom', 6) },
      { id: 'researchhub', name: 'Research Hub', type: 'office', area: 85, energyUsage: calculateEnergyConsumption(85, 'office', 8) }
    ],
    second: [
      { id: 'room201', name: 'Room 201', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'room202', name: 'Room 202', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'facultyroom', name: 'Faculty Room', type: 'office', area: 100, energyUsage: calculateEnergyConsumption(100, 'office', 10) }
    ],
    third: [
      { id: 'room301', name: 'Room 301', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'room302', name: 'Room 302', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'laboratory', name: 'Laboratory', type: 'lab', area: 120, energyUsage: calculateEnergyConsumption(120, 'lab', 6) }
    ],
    fourth: [
      { id: 'room401', name: 'Room 401', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'room402', name: 'Room 402', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'computerlab', name: 'Computer Lab', type: 'lab', area: 110, energyUsage: calculateEnergyConsumption(110, 'lab', 10) }
    ],
    fifth: [
      { id: 'room501', name: 'Room 501', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'room502', name: 'Room 502', type: 'classroom', area: 75, energyUsage: calculateEnergyConsumption(75, 'classroom', 8) },
      { id: 'multimediaroom', name: 'Multimedia Room', type: 'lab', area: 100, energyUsage: calculateEnergyConsumption(100, 'lab', 8) }
    ]
  },
  // Energy distribution based on Philippine Department of Energy Audits for Educational Buildings
  energyData: {
    monthly: [
      { month: 'Jan', lighting: 2100, hvac: 3800, equipment: 1300, total: 7200 },
      { month: 'Feb', lighting: 2000, hvac: 3600, equipment: 1250, total: 6850 },
      { month: 'Mar', lighting: 2200, hvac: 4000, equipment: 1350, total: 7550 },
      { month: 'Apr', lighting: 2300, hvac: 4200, equipment: 1400, total: 7900 },
      { month: 'May', lighting: 2400, hvac: 4500, equipment: 1500, total: 8400 },
      { month: 'Jun', lighting: 2200, hvac: 4300, equipment: 1400, total: 7900 },
      { month: 'Jul', lighting: 2100, hvac: 4000, equipment: 1350, total: 7450 },
      { month: 'Aug', lighting: 2150, hvac: 4100, equipment: 1380, total: 7630 },
      { month: 'Sep', lighting: 2200, hvac: 4200, equipment: 1400, total: 7800 },
      { month: 'Oct', lighting: 2250, hvac: 4300, equipment: 1450, total: 8000 },
      { month: 'Nov', lighting: 2100, hvac: 4000, equipment: 1350, total: 7450 },
      { month: 'Dec', lighting: 1900, hvac: 3700, equipment: 1250, total: 6850 }
    ],
    // Distribution based on actual PH Department of Energy audit for educational buildings
    distribution: [
      { name: 'Lighting', value: 27 },
      { name: 'HVAC', value: 52 },
      { name: 'Equipment', value: 18 },
      { name: 'Others', value: 3 }
    ]
  }
};

// Colors for different room types
const ROOM_TYPE_COLORS = {
  classroom: '#4caf50',
  lab: '#f44336',
  office: '#2196f3',
  common: '#ff9800',
  utility: '#9e9e9e'
};

// Colors for pie chart
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

interface Room {
  id: string;
  name: string;
  type: string;
  area: number;
  energyUsage: number;
  actualLumens?: number;
  outletCompliance?: boolean;
  protectionCompliance?: boolean;
}

// Floor plan layouts for University of Cebu Lapu-Lapu and Mandaue (UCLM) Old Building
const FLOOR_PLANS = {
  ground: {
    width: 1000,
    height: 600,
    rooms: [
      { id: 'registrar', x: 50, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'guidance', x: 500, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'edp', x: 50, y: 300, width: 400, height: 200, shape: 'rect' },
      { id: 'accounting', x: 500, y: 300, width: 400, height: 200, shape: 'rect' },
      { id: 'corridor', x: 450, y: 50, width: 50, height: 450, shape: 'rect', type: 'corridor' }
    ],
    corridors: [
      { x1: 450, y1: 150, x2: 500, y2: 150, width: 3 },
      { x1: 450, y1: 350, x2: 500, y2: 350, width: 3 },
      { x1: 250, y1: 250, x2: 250, y2: 300, width: 3 },
      { x1: 650, y1: 250, x2: 650, y2: 300, width: 3 }
    ]
  },
  mezzanine: {
    width: 1000,
    height: 600,
    rooms: [
      { id: 'gsr1', x: 50, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'gsr2', x: 500, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'researchhub', x: 50, y: 300, width: 850, height: 200, shape: 'rect' },
      { id: 'corridor', x: 450, y: 50, width: 50, height: 450, shape: 'rect', type: 'corridor' }
    ],
    corridors: [
      { x1: 450, y1: 150, x2: 500, y2: 150, width: 3 },
      { x1: 475, y1: 250, x2: 475, y2: 300, width: 3 }
    ]
  },
  second: {
    width: 1000,
    height: 600,
    rooms: [
      { id: 'room201', x: 50, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'room202', x: 500, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'facultyroom', x: 50, y: 300, width: 850, height: 200, shape: 'rect' },
      { id: 'corridor', x: 450, y: 50, width: 50, height: 450, shape: 'rect', type: 'corridor' }
    ],
    corridors: [
      { x1: 450, y1: 150, x2: 500, y2: 150, width: 3 },
      { x1: 475, y1: 250, x2: 475, y2: 300, width: 3 }
    ]
  },
  third: {
    width: 1000,
    height: 600,
    rooms: [
      { id: 'room301', x: 50, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'room302', x: 500, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'laboratory', x: 50, y: 300, width: 850, height: 200, shape: 'rect' },
      { id: 'corridor', x: 450, y: 50, width: 50, height: 450, shape: 'rect', type: 'corridor' }
    ],
    corridors: [
      { x1: 450, y1: 150, x2: 500, y2: 150, width: 3 },
      { x1: 475, y1: 250, x2: 475, y2: 300, width: 3 }
    ]
  },
  fourth: {
    width: 1000,
    height: 600,
    rooms: [
      { id: 'room401', x: 50, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'room402', x: 500, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'computerlab', x: 50, y: 300, width: 850, height: 200, shape: 'rect' },
      { id: 'corridor', x: 450, y: 50, width: 50, height: 450, shape: 'rect', type: 'corridor' }
    ],
    corridors: [
      { x1: 450, y1: 150, x2: 500, y2: 150, width: 3 },
      { x1: 475, y1: 250, x2: 475, y2: 300, width: 3 }
    ]
  },
  fifth: {
    width: 1000,
    height: 600,
    rooms: [
      { id: 'room501', x: 50, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'room502', x: 500, y: 50, width: 400, height: 200, shape: 'rect' },
      { id: 'multimediaroom', x: 50, y: 300, width: 850, height: 200, shape: 'rect' },
      { id: 'corridor', x: 450, y: 50, width: 50, height: 450, shape: 'rect', type: 'corridor' }
    ],
    corridors: [
      { x1: 450, y1: 150, x2: 500, y2: 150, width: 3 },
      { x1: 475, y1: 250, x2: 475, y2: 300, width: 3 }
    ]
  }
};

// Define FloorComplianceData interface
interface FloorComplianceData {
  lighting: {
    complied: number;
    nonCompliant: number;
    percentage: number;
  };
  outlets: {
    complied: number;
    nonCompliant: number;
    percentage: number;
  };
  protection: {
    complied: number;
    nonCompliant: number;
    percentage: number;
  };
}

// Update COMPLIANCE_DATA typing 
const COMPLIANCE_DATA: Record<string, FloorComplianceData> = {
  ground: {
    lighting: { complied: 1, nonCompliant: 3, percentage: 25.00 },
    outlets: { complied: 4, nonCompliant: 0, percentage: 100.00 },
    protection: { complied: 4, nonCompliant: 0, percentage: 100.00 }
  },
  mezzanine: {
    lighting: { complied: 8, nonCompliant: 5, percentage: 61.53 },
    outlets: { complied: 13, nonCompliant: 0, percentage: 100.00 },
    protection: { complied: 3, nonCompliant: 0, percentage: 100.00 }
  },
  second: {
    lighting: { complied: 2, nonCompliant: 7, percentage: 22.22 },
    outlets: { complied: 9, nonCompliant: 0, percentage: 100.00 },
    protection: { complied: 3, nonCompliant: 0, percentage: 100.00 }
  },
  third: {
    lighting: { complied: 2, nonCompliant: 10, percentage: 16.66 },
    outlets: { complied: 12, nonCompliant: 0, percentage: 100.00 },
    protection: { complied: 3, nonCompliant: 0, percentage: 100.00 }
  },
  fourth: {
    lighting: { complied: 3, nonCompliant: 7, percentage: 30.00 },
    outlets: { complied: 10, nonCompliant: 0, percentage: 100.00 },
    protection: { complied: 3, nonCompliant: 0, percentage: 100.00 }
  },
  fifth: {
    lighting: { complied: 9, nonCompliant: 5, percentage: 64.29 },
    outlets: { complied: 14, nonCompliant: 0, percentage: 100.00 },
    protection: { complied: 5, nonCompliant: 2, percentage: 71.43 }
  }
};

// Add hot spots for critical areas on each floor that need attention
const FLOOR_HOTSPOTS: Record<string, NonCompliantArea[]> = {
  ground: [
    { 
      id: 'lighting-area1', 
      x: 50, 
      y: 150, 
      width: 100, 
      height: 80, 
      type: 'lighting',
      compliance: 25.00, 
      title: 'Non-compliant Lighting Area', 
      description: 'Lighting fixtures need to be upgraded to meet PEC Article 3 requirements',
      isEditable: true
    }
  ],
  mezzanine: [
    { 
      id: 'lighting-area2', 
      x: 240, 
      y: 180, 
      width: 120, 
      height: 100, 
      type: 'lighting',
      compliance: 61.53, 
      title: 'Moderate Compliance Area', 
      description: 'Lighting improvements required to achieve full PEC compliance',
      isEditable: true
    }
  ],
  second: [
    { 
      id: 'lighting-area3', 
      x: 100, 
      y: 200, 
      width: 150, 
      height: 120, 
      type: 'lighting',
      compliance: 22.22, 
      title: 'Critical Non-compliance', 
      description: 'Major lighting upgrades required to meet PEC standards',
      isEditable: true
    }
  ],
  third: [
    { 
      id: 'lighting-area4', 
      x: 180, 
      y: 150, 
      width: 130, 
      height: 90, 
      type: 'lighting',
      compliance: 16.66, 
      title: 'Severe Non-compliance', 
      description: 'Immediate attention required for lighting system compliance',
      isEditable: true
    }
  ],
  fourth: [
    { 
      id: 'lighting-area5', 
      x: 220, 
      y: 180, 
      width: 140, 
      height: 110, 
      type: 'lighting',
      compliance: 30.00, 
      title: 'Needs Improvement', 
      description: 'Lighting system requires upgrades to achieve better compliance',
      isEditable: true
    }
  ],
  fifth: [
    { 
      id: 'lighting-area6', 
      x: 150, 
      y: 200, 
      width: 120, 
      height: 100, 
      type: 'lighting',
      compliance: 64.29, 
      title: 'Moderate Compliance', 
      description: 'Some lighting improvements needed to achieve full compliance',
      isEditable: true
    },
    { 
      id: 'protection-area1', 
      x: 350, 
      y: 150, 
      width: 100, 
      height: 80, 
      type: 'power',
      compliance: 71.43, 
      title: 'Protection Devices Attention', 
      description: '28.57% of protection devices need replacement to comply with PEC 2.40',
      isEditable: true
    }
  ]
};

// Define room illumination requirements based on Philippine Electrical Code (PEC)
interface RoomIlluminationRequirement {
  roomType: string;
  requiredLux: number;
  description: string;
  reference: string;
}

// Define specific room data with dimensions and requirements
interface RoomDetail {
  id: string;
  name: string;
  length: number;
  width: number;
  height: number;
  area: number;
  roomType: string;
  coords: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
  // New fields for custom shapes and colors
  shape?: AreaShape;
  points?: AreaPoint[];
  color?: string;
  // Existing fields for illumination calculation
  manualArea?: number;
  reflectanceCeiling?: number;
  reflectanceWalls?: number;
  reflectanceFloor?: number;
  maintenanceFactor?: number;
}

// Illumination requirements based on PEC and IIEE guidelines
const ILLUMINATION_REQUIREMENTS: RoomIlluminationRequirement[] = [
  { roomType: 'office', requiredLux: 300, description: 'General office work, reading, writing', reference: 'PEC Article 3.9.2.1' },
  { roomType: 'classroom', requiredLux: 300, description: 'Classrooms, lecture halls', reference: 'PEC Article 3.9.2.2' },
  { roomType: 'lab', requiredLux: 500, description: 'Laboratories, technical drawing', reference: 'PEC Article 3.9.2.3' },
  { roomType: 'common', requiredLux: 150, description: 'Lobbies, corridors, stairs', reference: 'PEC Article 3.9.2.6' },
  { roomType: 'utility', requiredLux: 100, description: 'Storage rooms, archives', reference: 'PEC Article 3.9.2.8' },
  { roomType: 'library', requiredLux: 300, description: 'Library reading areas', reference: 'PEC Article 3.9.2.9' },
  { roomType: 'auditorium', requiredLux: 150, description: 'Auditoriums, assembly areas', reference: 'PEC Article 3.9.2.10' },
  { roomType: 'computerlab', requiredLux: 500, description: 'Computer workstations', reference: 'PEC Article 3.9.2.11' },
  { roomType: 'conferenceroom', requiredLux: 300, description: 'Conference and meeting rooms', reference: 'PEC Article 3.9.2.12' },
  { roomType: 'drawingroom', requiredLux: 750, description: 'Detailed drawing work', reference: 'PEC Article 3.9.2.13' },
  { roomType: 'cafeteria', requiredLux: 200, description: 'Dining areas', reference: 'PEC Article 3.9.2.14' }
];

// Specific room details from the floor plans
const DETAILED_ROOMS: Record<string, RoomDetail[]> = {
  ground: [
    { 
      id: 'sao', 
      name: 'SAO Office', 
      length: 8.5, 
      width: 6.2, 
      height: 3.0, 
      area: 52.7, 
      roomType: 'office',
      coords: { x: 150, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'registrar', 
      name: 'Registrar Office', 
      length: 10.2, 
      width: 8.5, 
      height: 3.0, 
      area: 86.7, 
      roomType: 'office',
      coords: { x: 300, y: 100, width: 140, height: 110 } 
    },
    { 
      id: 'guidance', 
      name: 'Guidance Office', 
      length: 7.3, 
      width: 6.5, 
      height: 3.0, 
      area: 47.45, 
      roomType: 'office',
      coords: { x: 450, y: 100, width: 110, height: 90 } 
    },
    { 
      id: 'lobby', 
      name: 'Main Lobby', 
      length: 12.0, 
      width: 8.0, 
      height: 3.5, 
      area: 96.0, 
      roomType: 'common',
      coords: { x: 250, y: 250, width: 180, height: 120 } 
    },
    { 
      id: 'accounting', 
      name: 'Accounting Office', 
      length: 8.0, 
      width: 6.0, 
      height: 3.0, 
      area: 48.0, 
      roomType: 'office',
      coords: { x: 600, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'edp', 
      name: 'EDP Office', 
      length: 9.0, 
      width: 7.0, 
      height: 3.0, 
      area: 63.0, 
      roomType: 'office',
      coords: { x: 750, y: 100, width: 130, height: 100 } 
    }
  ],
  mezzanine: [
    { 
      id: 'gsr1', 
      name: 'GSR 1', 
      length: 9.2, 
      width: 7.4, 
      height: 3.0, 
      area: 68.08, 
      roomType: 'classroom',
      coords: { x: 150, y: 100, width: 110, height: 90 } 
    },
    { 
      id: 'gsr2', 
      name: 'GSR 2', 
      length: 9.2, 
      width: 7.4, 
      height: 3.0, 
      area: 68.08, 
      roomType: 'classroom',
      coords: { x: 300, y: 100, width: 110, height: 90 } 
    },
    { 
      id: 'researchhub', 
      name: 'Research Hub', 
      length: 12.5, 
      width: 8.0, 
      height: 3.0, 
      area: 100.0, 
      roomType: 'office',
      coords: { x: 180, y: 250, width: 150, height: 100 } 
    },
    { 
      id: 'library', 
      name: 'Library', 
      length: 15.0, 
      width: 10.0, 
      height: 3.0, 
      area: 150.0, 
      roomType: 'library',
      coords: { x: 450, y: 200, width: 180, height: 120 } 
    }
  ],
  second: [
    { 
      id: 'room201', 
      name: 'Room 201', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'room202', 
      name: 'Room 202', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'facultyroom', 
      name: 'Faculty Room', 
      length: 12.0, 
      width: 8.0, 
      height: 3.0, 
      area: 96.0, 
      roomType: 'office',
      coords: { x: 400, y: 100, width: 140, height: 100 } 
    },
    { 
      id: 'room203', 
      name: 'Room 203', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 220, width: 120, height: 90 } 
    },
    { 
      id: 'room204', 
      name: 'Room 204', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 220, width: 120, height: 90 } 
    },
    { 
      id: 'deans_office', 
      name: 'Dean\'s Office', 
      length: 8.0, 
      width: 6.0, 
      height: 3.0, 
      area: 48.0, 
      roomType: 'office',
      coords: { x: 400, y: 220, width: 100, height: 80 } 
    }
  ],
  third: [
    { 
      id: 'room301', 
      name: 'Room 301', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'room302', 
      name: 'Room 302', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'laboratory', 
      name: 'Science Laboratory', 
      length: 12.0, 
      width: 10.0, 
      height: 3.0, 
      area: 120.0, 
      roomType: 'lab',
      coords: { x: 400, y: 100, width: 150, height: 120 } 
    },
    { 
      id: 'room303', 
      name: 'Room 303', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 220, width: 120, height: 90 } 
    },
    { 
      id: 'room304', 
      name: 'Room 304', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 220, width: 120, height: 90 } 
    }
  ],
  fourth: [
    { 
      id: 'room401', 
      name: 'Room 401', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'room402', 
      name: 'Room 402', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'computerlab', 
      name: 'Computer Laboratory', 
      length: 12.0, 
      width: 9.0, 
      height: 3.0, 
      area: 108.0, 
      roomType: 'lab',
      coords: { x: 400, y: 100, width: 150, height: 110 } 
    },
    { 
      id: 'room403', 
      name: 'Room 403', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 220, width: 120, height: 90 } 
    },
    { 
      id: 'room404', 
      name: 'Room 404', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 220, width: 120, height: 90 } 
    },
    { 
      id: 'engineeringlab', 
      name: 'Engineering Lab', 
      length: 12.0, 
      width: 9.0, 
      height: 3.0, 
      area: 108.0, 
      roomType: 'lab',
      coords: { x: 400, y: 220, width: 150, height: 110 } 
    }
  ],
  fifth: [
    { 
      id: 'room501', 
      name: 'Room 501', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'room502', 
      name: 'Room 502', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 100, width: 120, height: 90 } 
    },
    { 
      id: 'multimediaroom', 
      name: 'Multimedia Room', 
      length: 12.0, 
      width: 8.0, 
      height: 3.0, 
      area: 96.0, 
      roomType: 'lab',
      coords: { x: 400, y: 100, width: 140, height: 100 } 
    },
    { 
      id: 'room503', 
      name: 'Room 503', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 100, y: 220, width: 120, height: 90 } 
    },
    { 
      id: 'room504', 
      name: 'Room 504', 
      length: 9.5, 
      width: 7.5, 
      height: 3.0, 
      area: 71.25, 
      roomType: 'classroom',
      coords: { x: 250, y: 220, width: 120, height: 90 } 
    },
    { 
      id: 'auditorium', 
      name: 'Mini Auditorium', 
      length: 15.0, 
      width: 12.0, 
      height: 4.0, 
      area: 180.0, 
      roomType: 'auditorium',
      coords: { x: 400, y: 220, width: 180, height: 140 } 
    }
  ]
};

// Define lamp types with their specifications
interface LampType {
  id: string;
  name: string;
  wattage: number;
  lumens: number;
  efficacy: number; // lumens per watt
  lifeHours: number;
  costPerUnit: number; // PHP
  isCustom?: boolean;
}

const LAMP_TYPES: LampType[] = [
  { id: 'led-tube', name: 'LED Tube T8 18W', wattage: 18, lumens: 1800, efficacy: 100, lifeHours: 50000, costPerUnit: 350 },
  { id: 'led-panel', name: 'LED Panel 36W', wattage: 36, lumens: 3600, efficacy: 100, lifeHours: 50000, costPerUnit: 1200 },
  { id: 'led-bulb', name: 'LED Bulb 9W', wattage: 9, lumens: 800, efficacy: 88.9, lifeHours: 25000, costPerUnit: 150 },
  { id: 'fluorescent-t8', name: 'Fluorescent T8 36W', wattage: 36, lumens: 2800, efficacy: 77.8, lifeHours: 10000, costPerUnit: 180 },
  { id: 'fluorescent-t5', name: 'Fluorescent T5 28W', wattage: 28, lumens: 2600, efficacy: 92.9, lifeHours: 20000, costPerUnit: 220 },
  { id: 'metal-halide', name: 'Metal Halide 150W', wattage: 150, lumens: 12000, efficacy: 80, lifeHours: 15000, costPerUnit: 1500 }
];

// Define illumination calculation results interface
interface IlluminationResult {
  room: RoomDetail;
  lampType: LampType;
  requirement: RoomIlluminationRequirement;
  totalLumensRequired: number;
  LLF: number;
  UF: number;
  RCR: number;
  numberOfLamps: number;
  actualLamps: number;
  lampsAlongLength: number;
  lampsAlongWidth: number;
  spacingLength: number;
  spacingWidth: number;
  totalWattage: number;
  dailyConsumption: number;
  monthlyConsumption: number;
  annualConsumption: number;
  annualEnergyCost: number;
  initialInvestment: number;
  powerDensity: number;
  averageIlluminance: number;
}

// Create a new component for floor illumination summary
const FloorIlluminationSummary: React.FC<{
  floor: string;
  rooms: RoomDetail[];
  selectedLampType: string;
}> = ({ floor, rooms, selectedLampType }) => {
  const [summaryStats, setSummaryStats] = useState<{
    totalArea: number;
    totalLumensRequired: number;
    totalFixtures: number;
    totalPower: number;
    averagePowerDensity: number;
    compliancePercentage: number;
    annualEnergyCost: number;
  } | null>(null);

  useEffect(() => {
    if (!rooms.length) return;

    // Calculate summary statistics for the floor
    let totalArea = 0;
    let totalLumensRequired = 0;
    let totalFixtures = 0;
    let totalPower = 0;
    let complianceCount = 0;
    
    const lampType = LAMP_TYPES.find(lamp => lamp.id === selectedLampType);
    if (!lampType) return;
    
    rooms.forEach(room => {
      // Find illumination requirement for this room type
      const req = ILLUMINATION_REQUIREMENTS.find(r => r.roomType === room.roomType);
      if (!req) return;
      
      totalArea += room.area;
      
      // Calculate required lumens
      const roomLumens = req.requiredLux * room.area;
      totalLumensRequired += roomLumens;
      
      // Calculate fixtures needed (simplified)
      const LLF = 0.8; // Light Loss Factor
      const UF = 0.6;  // Utilization Factor (average)
      
      const fixturesNeeded = Math.ceil(roomLumens / (lampType.lumens * LLF * UF));
      totalFixtures += fixturesNeeded;
      
      // Calculate power
      const roomPower = fixturesNeeded * lampType.wattage;
      totalPower += roomPower;
      
      // Check if the resulting illuminance would meet requirements
      const achievedIlluminance = (lampType.lumens * fixturesNeeded * LLF * UF) / room.area;
      if (achievedIlluminance >= req.requiredLux) {
        complianceCount++;
      }
    });
    
    // Calculate averages and totals
    const averagePowerDensity = totalPower / totalArea;
    const compliancePercentage = (complianceCount / rooms.length) * 100;
    
    // Calculate annual energy cost (8 hours daily, 22 days monthly, 12 months)
    const dailyEnergyUse = totalPower * 8 / 1000; // kWh
    const monthlyEnergyUse = dailyEnergyUse * 22; // kWh
    const annualEnergyUse = monthlyEnergyUse * 12; // kWh
    const annualEnergyCost = annualEnergyUse * 10; // PHP 10 per kWh
    
    setSummaryStats({
      totalArea,
      totalLumensRequired,
      totalFixtures,
      totalPower,
      averagePowerDensity,
      compliancePercentage,
      annualEnergyCost
    });
  }, [rooms, selectedLampType]);

  if (!summaryStats) return null;

  return (
    <Card variant="outlined">
      <CardContent>
        <Typography variant="h6" gutterBottom>
          {BUILDING_DATA.floors.find(f => f.id === floor)?.name} Illumination Summary
        </Typography>
        
        <Grid container spacing={2}>
          <Grid item xs={12} md={3}>
            <Typography variant="body2" color="text.secondary">Total Floor Area</Typography>
            <Typography variant="h6">{summaryStats.totalArea.toFixed(1)} m²</Typography>
          </Grid>
          
          <Grid item xs={12} md={3}>
            <Typography variant="body2" color="text.secondary">Required Fixtures</Typography>
            <Typography variant="h6">{summaryStats.totalFixtures}</Typography>
          </Grid>
          
          <Grid item xs={12} md={3}>
            <Typography variant="body2" color="text.secondary">Total Load</Typography>
            <Typography variant="h6">{summaryStats.totalPower} W</Typography>
          </Grid>
          
          <Grid item xs={12} md={3}>
            <Typography variant="body2" color="text.secondary">Power Density</Typography>
            <Typography variant="h6">{summaryStats.averagePowerDensity.toFixed(2)} W/m²</Typography>
          </Grid>
        </Grid>
        
        <Divider sx={{ my: 2 }} />
        
        <Grid container spacing={2}>
          <Grid item xs={12} md={4}>
            <Typography variant="body2" color="text.secondary">Est. Annual Energy Cost</Typography>
            <Typography variant="h6">₱{summaryStats.annualEnergyCost.toLocaleString()}</Typography>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <Typography variant="body2" color="text.secondary">PEC Compliance Rate</Typography>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Typography variant="h6" sx={{ mr: 1 }}>
                {summaryStats.compliancePercentage.toFixed(0)}%
              </Typography>
              <Box 
                sx={{ 
                  width: 16, 
                  height: 16,
                  borderRadius: '50%',
                  bgcolor: summaryStats.compliancePercentage >= 80 ? 'success.main' :
                           summaryStats.compliancePercentage >= 60 ? 'warning.main' : 'error.main'
                }} 
              />
            </Box>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <Typography variant="body2" color="text.secondary">Selected Lamp</Typography>
            <Typography variant="body1">
              {LAMP_TYPES.find(lamp => lamp.id === selectedLampType)?.name}
            </Typography>
          </Grid>
        </Grid>
        
        {summaryStats.averagePowerDensity > 10 && (
          <Alert severity="warning" sx={{ mt: 2 }}>
            Floor average power density exceeds DOE-recommended 10 W/m². Consider more efficient lighting options.
          </Alert>
        )}
        
        {summaryStats.compliancePercentage < 60 && (
          <Alert severity="error" sx={{ mt: 2 }}>
            Insufficient illumination levels in {(100 - summaryStats.compliancePercentage).toFixed(0)}% of rooms. Upgrade needed for PEC compliance.
          </Alert>
        )}
      </CardContent>
    </Card>
  );
};

// Add shape types for custom room areas
type AreaPoint = { x: number; y: number };
type AreaShape = 'rect' | 'polygon';

// Storage key for room data persistence
const ROOM_STORAGE_KEY = 'building-visualization-rooms';

// Default room colors based on room type
const DEFAULT_ROOM_COLORS: Record<string, string> = {
  'office': '#2196f3',      // Blue
  'classroom': '#4caf50',   // Green
  'lab': '#f44336',         // Red
  'common': '#ff9800',      // Orange
  'utility': '#9e9e9e',     // Gray
  'library': '#9c27b0',     // Purple
  'auditorium': '#795548',  // Brown
  'conferenceroom': '#607d8b', // Blue Gray
  'cafeteria': '#ff5722'    // Deep Orange
};

// Available colors for room customization
const COLOR_OPTIONS = [
  { name: 'Blue', value: '#2196f3' },
  { name: 'Green', value: '#4caf50' },
  { name: 'Red', value: '#f44336' },
  { name: 'Orange', value: '#ff9800' },
  { name: 'Purple', value: '#9c27b0' },
  { name: 'Teal', value: '#009688' },
  { name: 'Pink', value: '#e91e63' },
  { name: 'Amber', value: '#ffc107' },
  { name: 'Indigo', value: '#3f51b5' },
  { name: 'Lime', value: '#cddc39' }
];

// Define schedule of loads interface
interface LoadItem {
  description: string;
  quantity: number;
  rating: number; // in watts
  demandFactor: number;
  connectedLoad: number; // watts
  demandLoad: number; // watts
  circuitBreaker?: string;
  conductorSize?: string;
}

interface LoadSchedule {
  id: string;
  roomId: string;
  panelName: string;
  items: LoadItem[];
  totalConnectedLoad: number; // watts
  totalDemandLoad: number; // watts
  voltage: number; // volts
  current: number; // amps
  powerFactor: number;
  circuitBreaker?: string;
  conductorSize?: string;
  incomingFeederSize?: string;
  feederProtectionSize?: string;
}

// Load schedule data based on the SOL folder images
const LOAD_SCHEDULES: Record<string, LoadSchedule[]> = {
  ground: [
    {
      id: 'registrar-loads',
      roomId: 'registrar',
      panelName: "Registrar's Office Panel",
      items: [
        { description: "Fluorescent Lamps", quantity: 12, rating: 36, demandFactor: 1.0, connectedLoad: 432, demandLoad: 432, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Convenience Outlets", quantity: 8, rating: 180, demandFactor: 0.8, connectedLoad: 1440, demandLoad: 1152, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Computer Outlets", quantity: 6, rating: 250, demandFactor: 0.9, connectedLoad: 1500, demandLoad: 1350, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Air Conditioning", quantity: 2, rating: 1200, demandFactor: 0.8, connectedLoad: 2400, demandLoad: 1920, circuitBreaker: "30A", conductorSize: "5.5mm²" }
      ],
      totalConnectedLoad: 5772,
      totalDemandLoad: 4854,
      voltage: 230,
      current: 21.1,
      powerFactor: 0.85,
      circuitBreaker: "60A",
      conductorSize: "8mm²",
      incomingFeederSize: "3-8mm² THHN Cu. in 32mmØ IMC",
      feederProtectionSize: "60AT, 100AF, 3P"
    },
    {
      id: 'admin-loads',
      roomId: 'admin',
      panelName: "Admin Office Panel",
      items: [
        { description: "LED Lamps", quantity: 16, rating: 18, demandFactor: 1.0, connectedLoad: 288, demandLoad: 288, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Convenience Outlets", quantity: 12, rating: 180, demandFactor: 0.8, connectedLoad: 2160, demandLoad: 1728, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Computer Outlets", quantity: 10, rating: 250, demandFactor: 0.9, connectedLoad: 2500, demandLoad: 2250, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Air Conditioning", quantity: 3, rating: 1500, demandFactor: 0.8, connectedLoad: 4500, demandLoad: 3600, circuitBreaker: "30A", conductorSize: "5.5mm²" },
        { description: "Water Dispenser", quantity: 1, rating: 500, demandFactor: 0.5, connectedLoad: 500, demandLoad: 250, circuitBreaker: "15A", conductorSize: "2.0mm²" }
      ],
      totalConnectedLoad: 9948,
      totalDemandLoad: 8116,
      voltage: 230,
      current: 35.3,
      powerFactor: 0.85,
      circuitBreaker: "100A",
      conductorSize: "14mm²",
      incomingFeederSize: "3-14mm² THHN Cu. in 32mmØ IMC",
      feederProtectionSize: "100AT, 225AF, 3P"
    },
    {
      id: 'lobby-loads',
      roomId: 'lobby',
      panelName: "Main Lobby Panel",
      items: [
        { description: "Decorative Lighting", quantity: 8, rating: 50, demandFactor: 1.0, connectedLoad: 400, demandLoad: 400, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Ceiling Fans", quantity: 4, rating: 75, demandFactor: 1.0, connectedLoad: 300, demandLoad: 300, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Information Display", quantity: 2, rating: 150, demandFactor: 1.0, connectedLoad: 300, demandLoad: 300, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Security System", quantity: 1, rating: 200, demandFactor: 1.0, connectedLoad: 200, demandLoad: 200, circuitBreaker: "15A", conductorSize: "2.0mm²" }
      ],
      totalConnectedLoad: 1200,
      totalDemandLoad: 1200,
      voltage: 230,
      current: 5.2,
      powerFactor: 0.85,
      circuitBreaker: "30A",
      conductorSize: "5.5mm²",
      incomingFeederSize: "3-5.5mm² THHN Cu. in 25mmØ IMC",
      feederProtectionSize: "30AT, 100AF, 3P"
    }
  ],
  second: [
    {
      id: 'classroom-1-loads',
      roomId: 'classroom-1',
      panelName: "Classroom 201 Panel",
      items: [
        { description: "LED Lamps", quantity: 8, rating: 18, demandFactor: 1.0, connectedLoad: 144, demandLoad: 144, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Convenience Outlets", quantity: 6, rating: 180, demandFactor: 0.5, connectedLoad: 1080, demandLoad: 540, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Projector", quantity: 1, rating: 350, demandFactor: 0.8, connectedLoad: 350, demandLoad: 280, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Ceiling Fans", quantity: 4, rating: 75, demandFactor: 0.8, connectedLoad: 300, demandLoad: 240, circuitBreaker: "15A", conductorSize: "2.0mm²" }
      ],
      totalConnectedLoad: 1874,
      totalDemandLoad: 1204,
      voltage: 230,
      current: 5.2,
      powerFactor: 0.85,
      circuitBreaker: "30A",
      conductorSize: "5.5mm²",
      incomingFeederSize: "3-5.5mm² THHN Cu. in 25mmØ IMC",
      feederProtectionSize: "30AT, 100AF, 3P"
    },
    {
      id: 'faculty-room-loads',
      roomId: 'faculty-room',
      panelName: "Faculty Room Panel",
      items: [
        { description: "LED Lamps", quantity: 12, rating: 18, demandFactor: 1.0, connectedLoad: 216, demandLoad: 216, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Convenience Outlets", quantity: 10, rating: 180, demandFactor: 0.7, connectedLoad: 1800, demandLoad: 1260, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Computer Outlets", quantity: 8, rating: 250, demandFactor: 0.8, connectedLoad: 2000, demandLoad: 1600, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Air Conditioning", quantity: 2, rating: 1200, demandFactor: 0.8, connectedLoad: 2400, demandLoad: 1920, circuitBreaker: "30A", conductorSize: "5.5mm²" },
        { description: "Water Dispenser", quantity: 1, rating: 500, demandFactor: 0.5, connectedLoad: 500, demandLoad: 250, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Microwave Oven", quantity: 1, rating: 1000, demandFactor: 0.3, connectedLoad: 1000, demandLoad: 300, circuitBreaker: "20A", conductorSize: "3.5mm²" }
      ],
      totalConnectedLoad: 7916,
      totalDemandLoad: 5546,
      voltage: 230,
      current: 24.1,
      powerFactor: 0.85,
      circuitBreaker: "60A",
      conductorSize: "8mm²",
      incomingFeederSize: "3-8mm² THHN Cu. in 32mmØ IMC",
      feederProtectionSize: "60AT, 100AF, 3P"
    }
  ],
  third: [
    {
      id: 'library-loads',
      roomId: 'library',
      panelName: "Library Panel",
      items: [
        { description: "LED Lamps", quantity: 24, rating: 18, demandFactor: 1.0, connectedLoad: 432, demandLoad: 432, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Convenience Outlets", quantity: 16, rating: 180, demandFactor: 0.6, connectedLoad: 2880, demandLoad: 1728, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Computer Outlets", quantity: 20, rating: 250, demandFactor: 0.8, connectedLoad: 5000, demandLoad: 4000, circuitBreaker: "30A", conductorSize: "5.5mm²" },
        { description: "Air Conditioning", quantity: 4, rating: 1500, demandFactor: 0.8, connectedLoad: 6000, demandLoad: 4800, circuitBreaker: "40A", conductorSize: "8mm²" },
        { description: "Photocopier", quantity: 2, rating: 1200, demandFactor: 0.5, connectedLoad: 2400, demandLoad: 1200, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Scanner", quantity: 2, rating: 100, demandFactor: 0.5, connectedLoad: 200, demandLoad: 100, circuitBreaker: "15A", conductorSize: "2.0mm²" }
      ],
      totalConnectedLoad: 16912,
      totalDemandLoad: 12260,
      voltage: 230,
      current: 53.3,
      powerFactor: 0.85,
      circuitBreaker: "100A",
      conductorSize: "14mm²",
      incomingFeederSize: "3-14mm² THHN Cu. in 32mmØ IMC",
      feederProtectionSize: "100AT, 225AF, 3P"
    },
    {
      id: 'computer-lab-loads',
      roomId: 'computer-lab',
      panelName: "Computer Laboratory Panel",
      items: [
        { description: "LED Lamps", quantity: 16, rating: 18, demandFactor: 1.0, connectedLoad: 288, demandLoad: 288, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Computer Outlets", quantity: 30, rating: 250, demandFactor: 0.9, connectedLoad: 7500, demandLoad: 6750, circuitBreaker: "40A", conductorSize: "8mm²" },
        { description: "Air Conditioning", quantity: 3, rating: 1800, demandFactor: 0.8, connectedLoad: 5400, demandLoad: 4320, circuitBreaker: "30A", conductorSize: "5.5mm²" },
        { description: "Projector", quantity: 1, rating: 350, demandFactor: 0.8, connectedLoad: 350, demandLoad: 280, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Network Equipment", quantity: 1, rating: 500, demandFactor: 1.0, connectedLoad: 500, demandLoad: 500, circuitBreaker: "15A", conductorSize: "2.0mm²" }
      ],
      totalConnectedLoad: 14038,
      totalDemandLoad: 12138,
      voltage: 230,
      current: 52.8,
      powerFactor: 0.85,
      circuitBreaker: "100A",
      conductorSize: "14mm²",
      incomingFeederSize: "3-14mm² THHN Cu. in 32mmØ IMC",
      feederProtectionSize: "100AT, 225AF, 3P"
    }
  ],
  fourth: [
    {
      id: 'conference-room-loads',
      roomId: 'conference-room',
      panelName: "Conference Room Panel",
      items: [
        { description: "LED Lamps", quantity: 12, rating: 18, demandFactor: 1.0, connectedLoad: 216, demandLoad: 216, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Convenience Outlets", quantity: 8, rating: 180, demandFactor: 0.6, connectedLoad: 1440, demandLoad: 864, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Projector", quantity: 1, rating: 350, demandFactor: 0.8, connectedLoad: 350, demandLoad: 280, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Audio System", quantity: 1, rating: 400, demandFactor: 0.8, connectedLoad: 400, demandLoad: 320, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Video Conference System", quantity: 1, rating: 300, demandFactor: 0.8, connectedLoad: 300, demandLoad: 240, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Air Conditioning", quantity: 2, rating: 1500, demandFactor: 0.8, connectedLoad: 3000, demandLoad: 2400, circuitBreaker: "30A", conductorSize: "5.5mm²" }
      ],
      totalConnectedLoad: 5706,
      totalDemandLoad: 4320,
      voltage: 230,
      current: 18.8,
      powerFactor: 0.85,
      circuitBreaker: "60A",
      conductorSize: "8mm²",
      incomingFeederSize: "3-8mm² THHN Cu. in 32mmØ IMC",
      feederProtectionSize: "60AT, 100AF, 3P"
    },
    {
      id: 'research-lab-loads',
      roomId: 'research-lab',
      panelName: "Research Laboratory Panel",
      items: [
        { description: "LED Lamps", quantity: 16, rating: 18, demandFactor: 1.0, connectedLoad: 288, demandLoad: 288, circuitBreaker: "15A", conductorSize: "2.0mm²" },
        { description: "Convenience Outlets", quantity: 12, rating: 180, demandFactor: 0.7, connectedLoad: 2160, demandLoad: 1512, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Specialized Equipment", quantity: 4, rating: 800, demandFactor: 0.8, connectedLoad: 3200, demandLoad: 2560, circuitBreaker: "30A", conductorSize: "5.5mm²" },
        { description: "Computer Outlets", quantity: 8, rating: 250, demandFactor: 0.8, connectedLoad: 2000, demandLoad: 1600, circuitBreaker: "20A", conductorSize: "3.5mm²" },
        { description: "Air Conditioning", quantity: 2, rating: 1800, demandFactor: 0.8, connectedLoad: 3600, demandLoad: 2880, circuitBreaker: "30A", conductorSize: "5.5mm²" }
      ],
      totalConnectedLoad: 11248,
      totalDemandLoad: 8840,
      voltage: 230,
      current: 38.4,
      powerFactor: 0.85,
      circuitBreaker: "100A",
      conductorSize: "14mm²",
      incomingFeederSize: "3-14mm² THHN Cu. in 32mmØ IMC",
      feederProtectionSize: "100AT, 225AF, 3P"
    }
  ]
};

// Add renderRoomName function before the BuildingVisualization component
const renderRoomName = (room: any) => {
  return (
    <Typography 
      variant="body2" 
      sx={{ 
        textAlign: 'center',
        fontWeight: 'medium'
      }}
    >
      {room.name}
    </Typography>
  );
};

// Add utility function to return safe arrays (never undefined)
const safeArray = <T,>(arr: T[] | undefined): T[] => {
  return arr || [];
};

// Find BuildingVisualization component definition
const BuildingVisualization = (): JSX.Element => {
  const [activeTab, setActiveTab] = useState(0);
  const [selectedFloor, setSelectedFloor] = useState('ground');
  const [selectedTimeRange, setSelectedTimeRange] = useState('monthly');
  const [zoomLevel, setZoomLevel] = useState(1);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [selectedRoomType, setSelectedRoomType] = useState('all');
  const [viewMode, setViewMode] = useState<'lighting' | 'power'>('lighting');
  const [selectedRoom, setSelectedRoom] = useState<RoomDetail | null>(null);
  const [selectedLampType, setSelectedLampType] = useState<string>('led-tube');
  const [calculationResults, setCalculationResults] = useState<IlluminationResult | null>(null);
  const [showCalculationModal, setShowCalculationModal] = useState(false);
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const imageRef = useRef<HTMLImageElement | null>(null);
  const [hoveredRoom, setHoveredRoom] = useState<string | null>(null);
  const [manualArea, setManualArea] = useState<number | ''>('');
  const [isEditMode, setIsEditMode] = useState(false);
  const [draggedRoom, setDraggedRoom] = useState<string | null>(null);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [resizeMode, setResizeMode] = useState(false);
  const [resizeHandle, setResizeHandle] = useState<string | null>(null);
  const [drawMode, setDrawMode] = useState<'move' | 'resize' | 'draw' | null>(null);
  const [drawingPoints, setDrawingPoints] = useState<AreaPoint[]>([]);
  const [drawingRoom, setDrawingRoom] = useState<string | null>(null);
  const [editMenuAnchor, setEditMenuAnchor] = useState<null | HTMLElement>(null);
  const [selectedEditRoom, setSelectedEditRoom] = useState<string | null>(null);
  const [showLabels, setShowLabels] = useState(true);
  const [showColorPicker, setShowColorPicker] = useState(false);
  const [showNewRoomDialog, setShowNewRoomDialog] = useState(false);
  const [newRoomData, setNewRoomData] = useState<{
    name: string;
    roomType: string;
    length: number;
    width: number;
    height: number;
  }>({
    name: '',
    roomType: 'classroom',
    length: 9.0,
    width: 7.0,
    height: 3.0
  });
  // New states for custom lamp type and editable dimensions
  const [customLampTypes, setCustomLampTypes] = useState<LampType[]>([]);
  const [showCustomLampDialog, setShowCustomLampDialog] = useState(false);
  const [newLampData, setNewLampData] = useState<{
    name: string;
    wattage: number;
    lumens: number;
    lifeHours: number;
    costPerUnit: number;
  }>({
    name: 'Custom Lamp',
    wattage: 20,
    lumens: 2000,
    lifeHours: 30000,
    costPerUnit: 300
  });
  const [roomDimensions, setRoomDimensions] = useState<{
    length: number;
    width: number;
    height: number;
  }>({
    length: 0,
    width: 0,
    height: 0
  });
  // State for non-compliant areas that can be edited
  const [nonCompliantAreas, setNonCompliantAreas] = useState<Record<string, NonCompliantArea[]>>(FLOOR_HOTSPOTS);
  const [editingHotspot, setEditingHotspot] = useState<string | null>(null);
  const [showHotspotDialog, setShowHotspotDialog] = useState(false);
  const [selectedHotspot, setSelectedHotspot] = useState<NonCompliantArea | null>(null);
  const [newHotspotData, setNewHotspotData] = useState<Partial<NonCompliantArea>>({
    title: 'New Non-compliant Area',
    description: 'Description of non-compliance issue',
    type: 'lighting',
    compliance: 50.0,
    width: 100,
    height: 80
  });
  
  // State for power calculations
  const [selectedLoadSchedule, setSelectedLoadSchedule] = useState<LoadSchedule | null>(null);
  const [showLoadScheduleDialog, setShowLoadScheduleDialog] = useState(false);
  const [powerCalculationResults, setPowerCalculationResults] = useState<any | null>(null);
  
  // State for zoom scaling
  const [containerWidth, setContainerWidth] = useState(0);
  const [containerHeight, setContainerHeight] = useState(0);
  
  // State to force re-render when room data changes
  const [refreshKey, setRefreshKey] = useState(0);
  
  // Container reference for coordinate calculations
  const containerRef = useRef<HTMLDivElement>(null);
  const [containerRect, setContainerRect] = useState<DOMRect | null>(null);

  // Add missing state variables
  const [showAddLampDialog, setShowAddLampDialog] = useState(false);
  const [showCalculationDialog, setShowCalculationDialog] = useState(false);

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleFloorChange = (event: SelectChangeEvent) => {
    setSelectedFloor(event.target.value);
    setSelectedRoom(null); // Clear selected room when floor changes
  };

  const handleTimeRangeChange = (event: SelectChangeEvent) => {
    setSelectedTimeRange(event.target.value);
  };

  // Handle room type change for filter dropdown
  const handleRoomTypeFilterChange = (event: SelectChangeEvent) => {
    setSelectedRoomType(event.target.value);
  };

  const handleViewModeChange = (
    _: React.MouseEvent<HTMLElement>,
    newMode: 'lighting' | 'power' | null
  ) => {
    if (newMode !== null) {
      setViewMode(newMode);
      // Don't reset edit mode when switching views
      // This allows edit features to be available in both modes
    }
  };

  const handleLampTypeChange = (event: SelectChangeEvent) => {
    setSelectedLampType(event.target.value);
    if (selectedRoom) {
      calculateIllumination(selectedRoom, event.target.value);
    }
  };

  const handleZoomIn = () => {
    setZoomLevel(prev => Math.min(prev + 0.2, 2));
  };

  const handleZoomOut = () => {
    setZoomLevel(prev => Math.max(prev - 0.2, 0.5));
  };

  const toggleFullscreen = () => {
    setIsFullscreen(prev => !prev);
  };

  const handleRoomClick = (roomId: string) => {
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = DETAILED_ROOMS[floor] || [];
    const room = rooms.find(r => r.id === roomId);
    
    if (room) {
      setSelectedRoom(room);
      setManualArea(room.area);
      setShowCalculationModal(true);
      calculateIllumination(room, selectedLampType);
    }
  };

  // Calculate illumination requirements for a room
  const calculateIllumination = (room: RoomDetail, lampTypeId: string) => {
    // Find the selected lamp type from both default and custom lamps
    const lampType = [...LAMP_TYPES, ...customLampTypes].find(lamp => lamp.id === lampTypeId);
    const roomRequirement = ILLUMINATION_REQUIREMENTS.find(req => req.roomType === room.roomType);
    
    if (!lampType || !roomRequirement) return;
    
    // Use the room area calculated from dimensions
    const roomArea = room.area;
    
    // Calculate total illumination required (lux * area)
    const totalLumensRequired = roomRequirement.requiredLux * roomArea;
    
    // Calculate Light Loss Factor (LLF) - typically 0.7-0.8 for good maintenance
    const LLF = room.maintenanceFactor || 0.8;
    
    // Calculate Room Cavity Ratio (RCR) = 5 * Height * (Length + Width) / (Length * Width)
    const RCR = 5 * room.height * (room.length + room.width) / (room.length * room.width);
    
    // Calculate Utilization Factor based on RCR and room reflectances
    // Using formulas from IES (Illuminating Engineering Society) standards
    
    // Default reflectances if not specified
    const reflectanceCeiling = room.reflectanceCeiling || 0.8; // 80% ceiling reflectance
    const reflectanceWalls = room.reflectanceWalls || 0.5;    // 50% wall reflectance
    const reflectanceFloor = room.reflectanceFloor || 0.2;    // 20% floor reflectance
    
    // Calculate Coefficient of Utilization (CU) based on room reflectances and RCR
    // This is a simplified approximation
    let UF = 0;
    if (RCR <= 1) {
      UF = 0.7 * reflectanceCeiling * (0.9 * reflectanceWalls + 0.1);
    } else if (RCR <= 2) {
      UF = 0.6 * reflectanceCeiling * (0.8 * reflectanceWalls + 0.2);
    } else if (RCR <= 3) {
      UF = 0.5 * reflectanceCeiling * (0.7 * reflectanceWalls + 0.3);
    } else if (RCR <= 4) {
      UF = 0.4 * reflectanceCeiling * (0.6 * reflectanceWalls + 0.4);
    } else {
      UF = 0.35 * reflectanceCeiling * (0.5 * reflectanceWalls + 0.5);
    }
    
    // Ensure UF is within realistic bounds (0.2 to 0.8)
    UF = Math.max(0.2, Math.min(0.8, UF));
    
    // Number of lamps required = Total lumens / (Lamp lumens * LLF * UF)
    const numberOfLamps = Math.ceil(totalLumensRequired / (lampType.lumens * LLF * UF));
    
    // Calculate lamp arrangement
    const lengthRatio = Math.sqrt((room.length * numberOfLamps) / room.width);
    const widthRatio = numberOfLamps / lengthRatio;
    
    const lampsAlongLength = Math.round(lengthRatio);
    const lampsAlongWidth = Math.ceil(widthRatio);
    
    // Actual number of lamps after arrangement
    const actualLamps = lampsAlongLength * lampsAlongWidth;
    
    // Spacing calculations
    const spacingLength = room.length / (lampsAlongLength + 1);
    const spacingWidth = room.width / (lampsAlongWidth + 1);
    
    // Total wattage
    const totalWattage = actualLamps * lampType.wattage;
    
    // Energy consumption per day (assuming 8 hours usage)
    const dailyConsumption = totalWattage * 8 / 1000; // kWh
    
    // Monthly consumption (22 working days)
    const monthlyConsumption = dailyConsumption * 22; // kWh
    
    // Annual consumption
    const annualConsumption = monthlyConsumption * 12; // kWh
    
    // Cost calculation (assuming PHP 10 per kWh)
    const electricityRate = 10; // PHP per kWh
    const annualEnergyCost = annualConsumption * electricityRate;
    
    // Initial investment
    const initialInvestment = actualLamps * lampType.costPerUnit;
    
    // Calculate average illuminance achieved with this setup
    const averageIlluminance = (lampType.lumens * actualLamps * LLF * UF) / roomArea;
    
    // Store results
    const results: IlluminationResult = {
      room,
      lampType,
      requirement: roomRequirement,
      totalLumensRequired,
      LLF,
      UF,
      RCR,
      numberOfLamps,
      actualLamps,
      lampsAlongLength,
      lampsAlongWidth,
      spacingLength,
      spacingWidth,
      totalWattage,
      dailyConsumption,
      monthlyConsumption,
      annualConsumption,
      annualEnergyCost,
      initialInvestment,
      powerDensity: totalWattage / roomArea, // W/m²
      averageIlluminance
    };
    
    setCalculationResults(results);
  };

  // Initialize canvas and redraw on changes
  useEffect(() => {
    const canvas = canvasRef.current;
    if (canvas && activeTab === 0) {
      drawFloorPlan(canvas);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedFloor, zoomLevel, activeTab, selectedRoomType]);

  // Function to handle image orientation and text removal
  const processFloorPlanImage = (imageSrc: string): string => {
    // If image path is valid, return it; otherwise, return a fallback
    if (!imageSrc || typeof imageSrc !== 'string') {
      console.warn('Invalid image path:', imageSrc);
      return '/floorplan/placeholder.jpg';
    }
    
    // Return the image path
    return imageSrc;
  };

  // Handle image loading errors
  const handleImageError = (event: React.SyntheticEvent<HTMLImageElement, Event>) => {
    console.error(`Error loading image: ${event.currentTarget.src}`);
    
    // Set a better fallback message
    if (event.currentTarget instanceof HTMLImageElement) {
      event.currentTarget.src = '/floorplan/placeholder.jpg';
      event.currentTarget.style.opacity = '0.5';
      event.currentTarget.style.objectFit = 'contain';
    }
  };

  // Filter rooms based on selected type
  const filteredRooms = selectedRoomType === 'all' 
    ? BUILDING_DATA.rooms[selectedFloor as keyof typeof BUILDING_DATA.rooms] as Room[]
    : (BUILDING_DATA.rooms[selectedFloor as keyof typeof BUILDING_DATA.rooms] as Room[]).filter(room => room.type === selectedRoomType);

  // Calculate energy intensity (kWh/m²) - Based on Philippine Energy Efficiency Code
  const calculateEnergyIntensity = (room: Room) => {
    return room.energyUsage / room.area;
  };

  // Calculate energy efficiency rating based on DOE Philippines standards
  const getEnergyEfficiencyRating = (energyIntensity: number, roomType: string): string => {
    // Reference values based on DOE Philippines Energy Efficiency guidelines for different room types
    const efficiencyRanges = {
      'classroom': { excellent: 2.5, good: 3.0, average: 3.5, poor: 4.0 },
      'lab': { excellent: 4.0, good: 4.5, average: 5.0, poor: 5.5 },
      'office': { excellent: 2.0, good: 2.5, average: 3.0, poor: 3.5 },
      'common': { excellent: 1.8, good: 2.2, average: 2.8, poor: 3.2 },
      'utility': { excellent: 1.5, good: 2.0, average: 2.5, poor: 3.0 },
    };

    const ranges = efficiencyRanges[roomType as keyof typeof efficiencyRanges] || efficiencyRanges.office;

    if (energyIntensity <= ranges.excellent) return 'Excellent';
    if (energyIntensity <= ranges.good) return 'Good';
    if (energyIntensity <= ranges.average) return 'Average';
    return 'Poor';
  };

  // Function to draw floor plan on canvas - Based on building layout from thesis
  const drawFloorPlan = (canvas: HTMLCanvasElement) => {
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Get floor plan data
    const floorPlan = FLOOR_PLANS[selectedFloor as keyof typeof FLOOR_PLANS];
    if (!floorPlan) return;

    // Set canvas dimensions
    canvas.width = floorPlan.width;
    canvas.height = floorPlan.height;

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Apply zoom
    ctx.save();
    ctx.scale(zoomLevel, zoomLevel);

    // Draw floor outline
    ctx.fillStyle = '#f5f5f5';
    ctx.fillRect(0, 0, floorPlan.width / zoomLevel, floorPlan.height / zoomLevel);
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 2;
    ctx.strokeRect(0, 0, floorPlan.width / zoomLevel, floorPlan.height / zoomLevel);

    // Draw floor title and compliance info
    ctx.fillStyle = '#000';
    ctx.font = '20px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(
      `${BUILDING_DATA.floors.find(f => f.id === selectedFloor)?.name} - UCLM Old Building`,
      floorPlan.width / zoomLevel / 2,
      30
    );

    // Draw compliance data from thesis
    const complianceData = COMPLIANCE_DATA[selectedFloor as keyof typeof COMPLIANCE_DATA];
    if (complianceData) {
      ctx.font = '14px Arial';
      ctx.textAlign = 'left';
      
      // Reference: Table 14 from thesis
      ctx.fillText(
        `Lighting Compliance: ${complianceData.lighting.percentage.toFixed(2)}% (${complianceData.lighting.complied}/${complianceData.lighting.complied + complianceData.lighting.nonCompliant})`,
        20,
        570
      );
      
      // Reference: Table 13 from thesis
      ctx.fillText(
        `Outlets Compliance: ${complianceData.outlets.percentage.toFixed(2)}% (${complianceData.outlets.complied}/${complianceData.outlets.complied + complianceData.outlets.nonCompliant})`,
        400,
        570
      );
      
      // Reference: Table 12 from thesis
      ctx.fillText(
        `Protection Compliance: ${complianceData.protection.percentage.toFixed(2)}% (${complianceData.protection.complied}/${complianceData.protection.complied + complianceData.protection.nonCompliant})`,
        700,
        570
      );
    }

    // Draw corridors
    ctx.strokeStyle = '#aaa';
    ctx.lineWidth = 15;
    floorPlan.corridors.forEach(corridor => {
      ctx.beginPath();
      ctx.moveTo(corridor.x1, corridor.y1);
      ctx.lineTo(corridor.x2, corridor.y2);
      ctx.stroke();
    });

    // Draw rooms
    floorPlan.rooms.forEach(room => {
      // Skip if room filter is active and this is not the right type
      const roomsForFloor = BUILDING_DATA.rooms[selectedFloor as keyof typeof BUILDING_DATA.rooms] || [];
      const roomData = roomsForFloor.find(r => r.id === room.id);
      
      if (room.type !== 'corridor' && roomData && 
          (selectedRoomType === 'all' || roomData.type === selectedRoomType)) {
        // Calculate energy intensity based on Philippine Department of Energy standards
        const energyIntensity = roomData ? calculateEnergyIntensity(roomData) : 0;
        const efficiencyRating = getEnergyEfficiencyRating(energyIntensity, roomData.type);
        
        // Calculate intensity level (0-100) for visualization
        const maxIntensity = roomData.type === 'lab' ? 6.0 : 4.0; // Different thresholds based on room type
        const intensityLevel = Math.min(Math.round((energyIntensity / maxIntensity) * 100), 100);
        
        // Determine color based on intensity and room type (from PEC guidelines)
        const baseColor = roomData ? 
          ROOM_TYPE_COLORS[roomData.type as keyof typeof ROOM_TYPE_COLORS] || '#9e9e9e' : 
          '#9e9e9e';
        
        // Adjust opacity based on lighting compliance for this floor (from thesis data)
        const floorComplianceData = COMPLIANCE_DATA[selectedFloor as keyof typeof COMPLIANCE_DATA];
        const complianceRate = floorComplianceData ? floorComplianceData.lighting.percentage / 100 : 0.5;
        const opacity = 0.3 + (intensityLevel / 100) * 0.7 * complianceRate;
        
        // Set fill style with opacity
        ctx.fillStyle = hexToRgba(baseColor, opacity);
        
        // Draw room
        if (room.shape === 'rect') {
          ctx.fillRect(room.x, room.y, room.width, room.height);
          ctx.strokeStyle = '#666';
          ctx.lineWidth = 2;
          ctx.strokeRect(room.x, room.y, room.width, room.height);
        }
        
        // Add room label
        if (roomData) {
          ctx.fillStyle = intensityLevel > 50 ? '#fff' : '#000';
          ctx.font = '18px Arial';
          ctx.textAlign = 'center';
          ctx.fillText(
            roomData.name, 
            room.x + room.width / 2, 
            room.y + room.height / 2 - 20
          );
          
          // Add energy details based on calculations
          ctx.font = '14px Arial';
          ctx.fillText(
            `Area: ${roomData.area} m²`, 
            room.x + room.width / 2, 
            room.y + room.height / 2 + 5
          );
          
          ctx.fillText(
            `Energy: ${roomData.energyUsage.toFixed(1)} kWh (${energyIntensity.toFixed(2)} kWh/m²)`, 
            room.x + room.width / 2, 
            room.y + room.height / 2 + 25
          );

          // Add efficiency rating based on DOE standards
          ctx.fillStyle = 
            efficiencyRating === 'Excellent' ? '#4caf50' :
            efficiencyRating === 'Good' ? '#8bc34a' :
            efficiencyRating === 'Average' ? '#ff9800' : '#f44336';
          ctx.fillText(
            `Efficiency: ${efficiencyRating}`, 
            room.x + room.width / 2, 
            room.y + room.height / 2 + 45
          );

          // Add compliance marker if non-compliant (based on thesis data)
          if (complianceData && complianceData.lighting.percentage < 100) {
            ctx.fillStyle = '#ff9800';
            ctx.font = '14px Arial';
            ctx.fillText(
              `Lighting compliance: ${complianceData.lighting.percentage.toFixed(0)}%`, 
              room.x + room.width / 2, 
              room.y + room.height / 2 + 65
            );
          }
        }
      } else if (room.type === 'corridor') {
        // Draw corridors
        ctx.fillStyle = '#dddddd';
        ctx.fillRect(room.x, room.y, room.width, room.height);
      }
    });

    ctx.restore();
  };

  // Helper function to convert hex to rgba
  const hexToRgba = (hex: string, opacity: number): string => {
    hex = hex.replace('#', '');
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    return `rgba(${r}, ${g}, ${b}, ${opacity})`;
  };

  // Handle area input change for illumination calculations
  const handleAreaChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value === '' ? '' : Number(e.target.value);
    setManualArea(value);
    
    if (value !== '' && selectedRoom) {
      const updatedRoom = {
        ...selectedRoom,
        manualArea: Number(value)
      };
      setSelectedRoom(updatedRoom);
      calculateIllumination(updatedRoom, selectedLampType);
    }
  };

  // Handle room position adjustment in edit mode
  const handleRoomDragStart = (e: React.MouseEvent, roomId: string, x: number, y: number) => {
    if (!isEditMode || drawMode !== 'move') return;
    e.stopPropagation();
    e.preventDefault(); // Prevent text selection during drag
    setDraggedRoom(roomId);
    
    // Calculate offset from the mouse position to the top-left corner of the element
    const rect = e.currentTarget.getBoundingClientRect();
    setDragOffset({
      x: e.clientX - rect.left,
      y: e.clientY - rect.top
    });
    
    // Add a class or style to indicate dragging state
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.zIndex = '100';
      e.currentTarget.style.opacity = '0.8';
    }
  };

  const handleRoomDragMove = (e: React.MouseEvent) => {
    if (!isEditMode || !draggedRoom || drawMode !== 'move') return;
    e.stopPropagation();
    e.preventDefault();
    
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = [...DETAILED_ROOMS[floor]];
    const roomIndex = rooms.findIndex(r => r.id === draggedRoom);
    
    if (roomIndex >= 0 && containerRef.current) {
      const containerRect = containerRef.current.getBoundingClientRect();
      
      // Get mouse position relative to container
      const mouseX = e.clientX - containerRect.left;
      const mouseY = e.clientY - containerRect.top;
      
      // Calculate new position accounting for drag offset
      const newX = mouseX - dragOffset.x;
      const newY = mouseY - dragOffset.y;
      
      // Add boundary checking to prevent dragging outside the container
      const roomWidth = rooms[roomIndex].coords.width;
      const roomHeight = rooms[roomIndex].coords.height;
      
      const boundedX = Math.max(0, Math.min(newX, containerRect.width - roomWidth));
      const boundedY = Math.max(0, Math.min(newY, containerRect.height - roomHeight));
      
      // Update room position without checking for overlaps with other elements
      // This makes the drag operation smoother
      const updatedRoom = {
        ...rooms[roomIndex],
        coords: {
          ...rooms[roomIndex].coords,
          x: boundedX,
          y: boundedY
        }
      };
      
      rooms[roomIndex] = updatedRoom;
      DETAILED_ROOMS[floor] = rooms;
      
      // Force re-render
      setRefreshKey(prev => prev + 1);
    }
  };

  const handleRoomDragEnd = () => {
    if (!isEditMode || !draggedRoom) return;
    
    // Reset styles
    const elements = document.querySelectorAll('.room-element');
    elements.forEach(el => {
      if (el instanceof HTMLElement) {
        el.style.zIndex = '';
        el.style.opacity = '';
      }
    });
    
    setDraggedRoom(null);
  };

  // Handle room resizing
  const handleResizeStart = (e: React.MouseEvent, roomId: string, handle: string) => {
    if (!isEditMode || drawMode !== 'resize') return;
    e.stopPropagation();
    setDraggedRoom(roomId);
    setResizeHandle(handle);
    const rect = containerRef.current?.getBoundingClientRect();
    if (!rect) return;
    
    setDragOffset({
      x: e.clientX,
      y: e.clientY
    });
  };

  const handleResizeMove = (e: React.MouseEvent) => {
    if (!isEditMode || !draggedRoom || !resizeHandle || drawMode !== 'resize') return;
    e.stopPropagation();
    e.preventDefault();
    
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = [...DETAILED_ROOMS[floor]];
    const roomIndex = rooms.findIndex(r => r.id === draggedRoom);
    
    if (roomIndex >= 0) {
      const room = rooms[roomIndex];
      const deltaX = e.clientX - dragOffset.x;
      const deltaY = e.clientY - dragOffset.y;
      
      let newCoords = { ...room.coords };
      
      // Update coordinates based on which handle is being dragged
      switch (resizeHandle) {
        case 'top-left':
          newCoords = {
            ...newCoords,
            x: newCoords.x + deltaX,
            y: newCoords.y + deltaY,
            width: newCoords.width - deltaX,
            height: newCoords.height - deltaY
          };
          break;
        case 'top-right':
          newCoords = {
            ...newCoords,
            y: newCoords.y + deltaY,
            width: newCoords.width + deltaX,
            height: newCoords.height - deltaY
          };
          break;
        case 'bottom-left':
          newCoords = {
            ...newCoords,
            x: newCoords.x + deltaX,
            width: newCoords.width - deltaX,
            height: newCoords.height + deltaY
          };
          break;
        case 'bottom-right':
          newCoords = {
            ...newCoords,
            width: newCoords.width + deltaX,
            height: newCoords.height + deltaY
          };
          break;
      }
      
      // Ensure width and height are positive
      if (newCoords.width > 10 && newCoords.height > 10) {
        const updatedRoom = {
          ...room,
          coords: newCoords
        };
        
        rooms[roomIndex] = updatedRoom;
        DETAILED_ROOMS[floor] = rooms;
      }
      
      // Update drag offset for next move
      setDragOffset({
        x: e.clientX,
        y: e.clientY
      });
    }
  };

  const handleResizeEnd = () => {
    setDraggedRoom(null);
    setResizeHandle(null);
  };

  // Handle polygon drawing
  const handleCanvasClick = (e: React.MouseEvent) => {
    if (!isEditMode || drawMode !== 'draw' || !containerRef.current) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // Add point to drawing
    setDrawingPoints([...drawingPoints, { x, y }]);
  };

  const handleFinishDrawing = () => {
    if (drawingPoints.length < 3 || !drawingRoom) return;
    
    // Calculate area of polygon using shoelace formula
    let area = 0;
    for (let i = 0; i < drawingPoints.length; i++) {
      const j = (i + 1) % drawingPoints.length;
      area += drawingPoints[i].x * drawingPoints[j].y;
      area -= drawingPoints[j].x * drawingPoints[i].y;
    }
    area = Math.abs(area) / 2;
    
    // Find bounding box
    const xs = drawingPoints.map(p => p.x);
    const ys = drawingPoints.map(p => p.y);
    const minX = Math.min(...xs);
    const maxX = Math.max(...xs);
    const minY = Math.min(...ys);
    const maxY = Math.max(...ys);
    const width = maxX - minX;
    const height = maxY - minY;
    
    // Create new room with polygon shape
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = [...DETAILED_ROOMS[floor]];
    const roomIndex = rooms.findIndex(r => r.id === drawingRoom);
    
    if (roomIndex >= 0) {
      const updatedRoom = {
        ...rooms[roomIndex],
        shape: 'polygon' as AreaShape,
        points: drawingPoints,
        coords: {
          x: minX,
          y: minY,
          width,
          height
        },
        area: area / 100 // Convert pixels to approximate square meters
      };
      
      rooms[roomIndex] = updatedRoom;
      DETAILED_ROOMS[floor] = rooms;
    }
    
    // Reset drawing state
    setDrawingPoints([]);
    setDrawingRoom(null);
    setDrawMode(null);
  };

  const handleCancelDrawing = () => {
    setDrawingPoints([]);
    setDrawingRoom(null);
    setDrawMode(null);
  };

  // Handle edit menu
  const handleEditMenuOpen = (e: React.MouseEvent, roomId: string) => {
    if (!isEditMode) return;
    e.stopPropagation();
    setEditMenuAnchor(e.currentTarget as HTMLElement);
    setSelectedEditRoom(roomId);
  };

  const handleEditMenuClose = () => {
    setEditMenuAnchor(null);
    setSelectedEditRoom(null);
  };

  const handleDeleteRoom = () => {
    if (!selectedEditRoom) return;
    
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = [...DETAILED_ROOMS[floor]];
    const filteredRooms = rooms.filter(r => r.id !== selectedEditRoom);
    
    DETAILED_ROOMS[floor] = filteredRooms;
    handleEditMenuClose();
  };

  const handleStartDrawing = () => {
    if (!selectedEditRoom) return;
    setDrawMode('draw');
    setDrawingRoom(selectedEditRoom);
    setDrawingPoints([]);
    handleEditMenuClose();
  };

  // Load saved room data from localStorage on component mount
  useEffect(() => {
    const loadSavedRooms = () => {
      try {
        const savedData = localStorage.getItem(ROOM_STORAGE_KEY);
        if (savedData) {
          const parsedData = JSON.parse(savedData);
          // Update the DETAILED_ROOMS object with saved data
          Object.keys(parsedData).forEach(floor => {
            if (DETAILED_ROOMS[floor]) {
              DETAILED_ROOMS[floor] = parsedData[floor];
            }
          });
        }
      } catch (error) {
        console.error('Error loading saved room data:', error);
      }
    };
    
    loadSavedRooms();
  }, []);
  
  // Save room data to localStorage whenever it changes
  const saveRoomData = () => {
    try {
      localStorage.setItem(ROOM_STORAGE_KEY, JSON.stringify(DETAILED_ROOMS));
      // Show temporary success message
      alert('Room data saved successfully!');
    } catch (error) {
      console.error('Error saving room data:', error);
      alert('Error saving room data. Please try again.');
    }
  };

  // Handle color change for a room
  const handleColorChange = (roomId: string, color: string) => {
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = [...DETAILED_ROOMS[floor]];
    const roomIndex = rooms.findIndex(r => r.id === roomId);
    
    if (roomIndex >= 0) {
      const updatedRoom = {
        ...rooms[roomIndex],
        color
      };
      
      rooms[roomIndex] = updatedRoom;
      DETAILED_ROOMS[floor] = rooms;
      setSelectedEditRoom(null);
      setEditMenuAnchor(null);
    }
  };

  // Handle creating a new room
  const handleAddNewRoom = () => {
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = [...DETAILED_ROOMS[floor]];
    
    // Create a unique ID
    const newId = `room-${Date.now()}`;
    
    // Calculate area
    const area = newRoomData.length * newRoomData.width;
    
    // Create new room
    const newRoom: RoomDetail = {
      id: newId,
      name: newRoomData.name,
      length: newRoomData.length,
      width: newRoomData.width,
      height: newRoomData.height,
      area,
      roomType: newRoomData.roomType,
      coords: {
        x: 100, // Default position
        y: 100,
        width: 120,
        height: 90
      },
      color: DEFAULT_ROOM_COLORS[newRoomData.roomType] || '#2196f3'
    };
    
    // Add to rooms array
    DETAILED_ROOMS[floor] = [...rooms, newRoom];
    
    // Reset form and close dialog
    setNewRoomData({
      name: '',
      roomType: 'classroom',
      length: 9.0,
      width: 7.0,
      height: 3.0
    });
    setShowNewRoomDialog(false);
  };

  // Handle input change for new room form
  const handleNewRoomInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewRoomData(prev => ({
      ...prev,
      [name]: name === 'name' ? value : Number(value)
    }));
  };

  // Handle room type change for new room
  const handleNewRoomTypeChange = (e: SelectChangeEvent<string>) => {
    setNewRoomData(prev => ({
      ...prev,
      roomType: e.target.value
    }));
  };

  // Handle dimension changes for illumination calculations
  const handleDimensionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    const numValue = Number(value);
    
    if (numValue > 0) {
      setRoomDimensions(prev => ({
        ...prev,
        [name]: numValue
      }));
      
      if (selectedRoom) {
        // Calculate new area based on dimensions
        const newArea = name === 'length' 
          ? numValue * roomDimensions.width
          : name === 'width'
            ? roomDimensions.length * numValue
            : selectedRoom.area;
        
        const updatedRoom = {
          ...selectedRoom,
          [name]: numValue,
          area: newArea
        };
        
        setSelectedRoom(updatedRoom);
        calculateIllumination(updatedRoom, selectedLampType);
      }
    }
  };

  // Function to add custom lamp type
  const handleAddCustomLamp = () => {
    const efficacy = newLampData.lumens / newLampData.wattage;
    const newLamp: LampType = {
      id: `custom-${Date.now()}`,
      name: newLampData.name,
      wattage: newLampData.wattage,
      lumens: newLampData.lumens,
      efficacy,
      lifeHours: newLampData.lifeHours,
      costPerUnit: newLampData.costPerUnit,
      isCustom: true
    };
    
    setCustomLampTypes([...customLampTypes, newLamp]);
    setSelectedLampType(newLamp.id);
    setShowCustomLampDialog(false);
    
    // If room is selected, recalculate with new lamp
    if (selectedRoom) {
      calculateIllumination(selectedRoom, newLamp.id);
    }
  };

  // Update energy data with calculation results
  useEffect(() => {
    if (calculationResults) {
      // Create a copy of the energy data
      const updatedEnergyData = { ...BUILDING_DATA.energyData };
      
      // Find the room in building data
      const floor = selectedFloor as keyof typeof BUILDING_DATA.rooms;
      const roomIndex = BUILDING_DATA.rooms[floor]?.findIndex(r => r.id === calculationResults.room.id);
      
      if (roomIndex !== undefined && roomIndex >= 0) {
        // Update the energy usage for this room
        const updatedRooms = [...BUILDING_DATA.rooms[floor]];
        updatedRooms[roomIndex] = {
          ...updatedRooms[roomIndex],
          energyUsage: calculationResults.monthlyConsumption,
          area: calculationResults.room.area
        } as Room;
        
        // Then add this line separately to ensure TypeScript accepts it
        if (updatedRooms[roomIndex]) {
          (updatedRooms[roomIndex] as any).actualLumens = calculationResults.averageIlluminance * calculationResults.room.area;
        }
        
        // Update the rooms data
        BUILDING_DATA.rooms[floor] = updatedRooms;
        
        // Recalculate monthly totals
        let totalLighting = 0;
        Object.keys(BUILDING_DATA.rooms).forEach(floorKey => {
          BUILDING_DATA.rooms[floorKey as keyof typeof BUILDING_DATA.rooms].forEach(room => {
            totalLighting += room.energyUsage;
          });
        });
        
        // Update monthly data (just lighting for now)
        updatedEnergyData.monthly = updatedEnergyData.monthly.map(month => ({
          ...month,
          lighting: totalLighting / 12, // Distribute evenly across months
          total: month.hvac + month.equipment + (totalLighting / 12)
        }));
        
        // Update distribution data
        const totalEnergy = totalLighting + 
          updatedEnergyData.monthly.reduce((sum, month) => sum + month.hvac + month.equipment, 0);
        
        const lightingPercentage = (totalLighting / totalEnergy) * 100;
        const hvacPercentage = (updatedEnergyData.monthly.reduce((sum, month) => sum + month.hvac, 0) / totalEnergy) * 100;
        const equipmentPercentage = (updatedEnergyData.monthly.reduce((sum, month) => sum + month.equipment, 0) / totalEnergy) * 100;
        const othersPercentage = 100 - lightingPercentage - hvacPercentage - equipmentPercentage;
        
        updatedEnergyData.distribution = [
          { name: 'Lighting', value: Math.round(lightingPercentage) },
          { name: 'HVAC', value: Math.round(hvacPercentage) },
          { name: 'Equipment', value: Math.round(equipmentPercentage) },
          { name: 'Others', value: Math.round(othersPercentage) }
        ];
        
        // Update the energy data
        BUILDING_DATA.energyData = updatedEnergyData;
        
        // Force re-render of detailed room information
        setRefreshKey(prev => prev + 1);
      }
    }
  }, [calculationResults, selectedFloor]);

  // Initialize room dimensions when a room is selected
  useEffect(() => {
    if (selectedRoom) {
      setRoomDimensions({
        length: selectedRoom.length,
        width: selectedRoom.width,
        height: selectedRoom.height
      });
    }
  }, [selectedRoom]);

  // Make non-compliant areas editable
  const handleHotspotDragStart = (e: React.MouseEvent, hotspotId: string) => {
    if (!isEditMode) return;
    e.stopPropagation();
    e.preventDefault(); // Prevent text selection
    setEditingHotspot(hotspotId);
    
    const rect = e.currentTarget.getBoundingClientRect();
    setDragOffset({
      x: e.clientX - rect.left,
      y: e.clientY - rect.top
    });
    
    // Add visual feedback
    if (e.currentTarget instanceof HTMLElement) {
      e.currentTarget.style.zIndex = '100';
      e.currentTarget.style.opacity = '0.8';
    }
  };

  // Handle dragging of hotspots
  const handleHotspotDrag = (e: React.MouseEvent) => {
    if (!isEditMode || !editingHotspot || !containerRef.current) return;
    e.stopPropagation();
    e.preventDefault();
    
    const floor = selectedFloor as keyof typeof nonCompliantAreas;
    const hotspots = [...nonCompliantAreas[floor] || []];
    const hotspotIndex = hotspots.findIndex(h => h.id === editingHotspot);
    
    if (hotspotIndex >= 0) {
      const containerRect = containerRef.current.getBoundingClientRect();
      
      // Get mouse position relative to container
      const mouseX = e.clientX - containerRect.left;
      const mouseY = e.clientY - containerRect.top;
      
      // Calculate new position accounting for drag offset
      const newX = mouseX - dragOffset.x;
      const newY = mouseY - dragOffset.y;
      
      // Add boundary checking
      const hotspotWidth = hotspots[hotspotIndex].width;
      const hotspotHeight = hotspots[hotspotIndex].height;
      
      const boundedX = Math.max(0, Math.min(newX, containerRect.width - hotspotWidth));
      const boundedY = Math.max(0, Math.min(newY, containerRect.height - hotspotHeight));
      
      // Update hotspot position without checking for overlaps
      // This ensures smooth dragging even when near other elements
      const updatedHotspot = {
        ...hotspots[hotspotIndex],
        x: boundedX,
        y: boundedY,
        isDragging: true
      };
      
      hotspots[hotspotIndex] = updatedHotspot;
      
      // Update state
      setNonCompliantAreas(prev => ({
        ...prev,
        [floor]: hotspots
      }));
      
      // Force re-render
      setRefreshKey(prev => prev + 1);
    }
  };

  const handleHotspotDragEnd = () => {
    if (!isEditMode || !editingHotspot) return;
    
    const floor = selectedFloor as keyof typeof nonCompliantAreas;
    const hotspots = [...nonCompliantAreas[floor] || []];
    const hotspotIndex = hotspots.findIndex(h => h.id === editingHotspot);
    
    if (hotspotIndex >= 0) {
      // Remove dragging state
      hotspots[hotspotIndex] = {
        ...hotspots[hotspotIndex],
        isDragging: false
      };
      
      setNonCompliantAreas({
        ...nonCompliantAreas,
        [floor]: hotspots
      });
    }
    
    // Reset styles
    const elements = document.querySelectorAll('.hotspot-element');
    elements.forEach(el => {
      if (el instanceof HTMLElement) {
        el.style.zIndex = '';
        el.style.opacity = '';
      }
    });
    
    setEditingHotspot(null);
  };

  // Handle editing hotspot
  const handleEditHotspot = (hotspot: NonCompliantArea) => {
    setSelectedHotspot(hotspot);
    setNewHotspotData({
      title: hotspot.title,
      description: hotspot.description,
      type: hotspot.type,
      compliance: hotspot.compliance,
      width: hotspot.width,
      height: hotspot.height
    });
    setShowHotspotDialog(true);
  };

  // Handle deleting hotspot
  const handleDeleteHotspot = (hotspotId: string) => {
    const floor = selectedFloor as keyof typeof nonCompliantAreas;
    const hotspots = [...nonCompliantAreas[floor] || []];
    const filteredHotspots = hotspots.filter(h => h.id !== hotspotId);
    
    setNonCompliantAreas({
      ...nonCompliantAreas,
      [floor]: filteredHotspots
    });
  };

  // Handle adding new hotspot
  const handleAddHotspot = () => {
    setSelectedHotspot(null);
    setNewHotspotData({
      title: 'New Non-compliant Area',
      description: 'Description of non-compliance issue',
      type: viewMode,
      compliance: 50.0,
      width: 100,
      height: 80
    });
    setShowHotspotDialog(true);
  };

  // Handle saving hotspot data
  const handleSaveHotspot = () => {
    const floor = selectedFloor as keyof typeof nonCompliantAreas;
    const hotspots = [...nonCompliantAreas[floor] || []];
    
    if (selectedHotspot) {
      // Update existing hotspot
      const hotspotIndex = hotspots.findIndex(h => h.id === selectedHotspot.id);
      if (hotspotIndex >= 0) {
        hotspots[hotspotIndex] = {
          ...hotspots[hotspotIndex],
          title: newHotspotData.title || hotspots[hotspotIndex].title,
          description: newHotspotData.description || hotspots[hotspotIndex].description,
          type: newHotspotData.type as 'lighting' | 'power' || hotspots[hotspotIndex].type,
          compliance: newHotspotData.compliance || hotspots[hotspotIndex].compliance,
          width: newHotspotData.width || hotspots[hotspotIndex].width,
          height: newHotspotData.height || hotspots[hotspotIndex].height
        };
      }
    } else {
      // Add new hotspot
      const x = containerRect ? containerRect.width / 2 - 50 : 100;
      const y = containerRect ? containerRect.height / 2 - 40 : 100;
      
      const newHotspot: NonCompliantArea = {
        id: `hotspot-${Date.now()}`,
        x,
        y,
        width: newHotspotData.width || 100,
        height: newHotspotData.height || 80,
        type: newHotspotData.type as 'lighting' | 'power' || viewMode,
        compliance: newHotspotData.compliance || 50.0,
        title: newHotspotData.title || 'New Non-compliant Area',
        description: newHotspotData.description || 'Description of non-compliance issue',
        isEditable: true
      };
      
      hotspots.push(newHotspot);
    }
    
    setNonCompliantAreas({
      ...nonCompliantAreas,
      [floor]: hotspots
    });
    
    setShowHotspotDialog(false);
  };

  // Update room data in BUILDING_DATA when room is updated
  useEffect(() => {
    if (calculationResults) {
      const floor = selectedFloor as keyof typeof BUILDING_DATA.rooms;
      const roomIndex = BUILDING_DATA.rooms[floor]?.findIndex(r => r.id === calculationResults.room.id);
      
      if (roomIndex !== undefined && roomIndex >= 0) {
        // Update the room data
        const updatedRooms = [...BUILDING_DATA.rooms[floor]];
        const updatedRoom = {
          ...updatedRooms[roomIndex],
          energyUsage: calculationResults.monthlyConsumption,
          area: calculationResults.room.area
        } as Room;
        
        // Add actualLumens property separately
        (updatedRoom as any).actualLumens = calculationResults.averageIlluminance * calculationResults.room.area;
        
        updatedRooms[roomIndex] = updatedRoom;
        BUILDING_DATA.rooms[floor] = updatedRooms;
      }
    }
  }, [calculationResults, selectedFloor]);

  // Fix zoom and responsive issues by tracking container size
  useEffect(() => {
    const updateContainerSize = () => {
      if (containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        setContainerWidth(rect.width);
        setContainerHeight(rect.height);
        setContainerRect(rect);
      }
    };
    
    // Initial update
    updateContainerSize();
    
    // Add resize listener
    window.addEventListener('resize', updateContainerSize);
    
    // Cleanup
    return () => {
      window.removeEventListener('resize', updateContainerSize);
    };
  }, []);

  // Update container size when zoom changes
  useEffect(() => {
    if (containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      setContainerWidth(rect.width);
      setContainerHeight(rect.height);
      setContainerRect(rect);
    }
  }, [zoomLevel, isFullscreen]);

  // Calculate scale factors for responsive positioning
  const calculateScaleFactor = () => {
    const floorPlan = FLOOR_PLANS[selectedFloor as keyof typeof FLOOR_PLANS];
    if (!floorPlan || !containerWidth) return 1;
    
    return containerWidth / floorPlan.width;
  };

  // Scale coordinates based on container size
  const scaleCoordinates = (x: number, y: number, width: number, height: number) => {
    const scaleFactor = calculateScaleFactor();
    return {
      x: x * scaleFactor,
      y: y * scaleFactor,
      width: width * scaleFactor,
      height: height * scaleFactor
    };
  };

  // Render room areas with proper scaling
  const renderRoomAreas = () => {
    const floor = selectedFloor as keyof typeof DETAILED_ROOMS;
    const rooms = DETAILED_ROOMS[floor] || [];
    
    return rooms.map(room => {
      const scaled = scaleCoordinates(
        room.coords.x, 
        room.coords.y, 
        room.coords.width, 
        room.coords.height
      );
      
      return (
        <Box
          key={room.id}
          className="room-element"
          sx={{
            position: 'absolute',
            left: `${scaled.x}px`,
            top: `${scaled.y}px`,
            width: `${scaled.width}px`,
            height: `${scaled.height}px`,
            border: `2px ${hoveredRoom === room.id ? 'solid' : 'dashed'}`,
            borderColor: selectedRoom?.id === room.id 
              ? 'primary.main' 
              : isEditMode
                ? 'warning.main'
                : hoveredRoom === room.id 
                  ? 'rgba(25, 118, 210, 0.8)' 
                  : 'rgba(25, 118, 210, 0.5)',
            backgroundColor: selectedRoom?.id === room.id 
              ? `${room.color || DEFAULT_ROOM_COLORS[room.roomType] || '#2196f3'}33` 
              : isEditMode
                ? `${room.color || DEFAULT_ROOM_COLORS[room.roomType] || '#ff9800'}22`
                : hoveredRoom === room.id 
                  ? `${room.color || DEFAULT_ROOM_COLORS[room.roomType] || '#2196f3'}22` 
                  : `${room.color || DEFAULT_ROOM_COLORS[room.roomType] || '#2196f3'}11`,
            borderRadius: '4px',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            cursor: isEditMode 
              ? (drawMode === 'move' ? 'move' : 'default')
              : 'pointer',
            zIndex: draggedRoom === room.id ? 100 : 10,
            transition: draggedRoom === room.id ? 'none' : 'all 0.3s ease',
            userSelect: 'none', // Prevent text selection during drag
            touchAction: 'none' // Prevent scrolling on touch devices
          }}
          onClick={isEditMode ? undefined : () => handleRoomClick(room.id)}
          onMouseDown={isEditMode && drawMode === 'move' ? 
            (e) => handleRoomDragStart(e, room.id, room.coords.x, room.coords.y) : 
            undefined}
          onMouseEnter={() => setHoveredRoom(room.id)}
          onMouseLeave={() => setHoveredRoom(null)}
        >
          <Typography 
            variant="body2" 
            sx={{ 
              textAlign: 'center',
              fontWeight: 'medium',
              pointerEvents: 'none' // Prevent text from interfering with drag
            }}
          >
            {room.name}
          </Typography>
        </Box>
      );
    });
  };

  // Render non-compliant areas with proper scaling
  const renderNonCompliantAreas = () => {
    const floor = selectedFloor as keyof typeof nonCompliantAreas;
    const hotspots = nonCompliantAreas[floor] || [];
    const scaleFactor = calculateScaleFactor();
    
    return hotspots.map(hotspot => {
      // Show all non-compliant areas regardless of view mode
      const scaled = scaleCoordinates(
        hotspot.x, 
        hotspot.y, 
        hotspot.width, 
        hotspot.height
      );
      
      return (
        <Box
          key={hotspot.id}
          className="hotspot-element"
          sx={{
            position: 'absolute',
            left: `${scaled.x}px`,
            top: `${scaled.y}px`,
            width: `${scaled.width}px`,
            height: `${scaled.height}px`,
            border: '2px dashed',
            borderColor: hotspot.type === 'lighting' ? 'error.main' : 'warning.main',
            backgroundColor: hotspot.type === 'lighting' 
              ? 'rgba(244, 67, 54, 0.2)' 
              : 'rgba(255, 152, 0, 0.2)',
            borderRadius: '4px',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            cursor: isEditMode ? 'move' : 'pointer',
            zIndex: editingHotspot === hotspot.id ? 100 : 20,
            transition: hotspot.isDragging ? 'none' : 'all 0.3s ease',
            userSelect: 'none', // Prevent text selection during drag
            touchAction: 'none' // Prevent scrolling on touch devices
          }}
          onMouseDown={(e) => isEditMode && handleHotspotDragStart(e, hotspot.id)}
          onClick={(e) => {
            e.stopPropagation();
            if (!isEditMode) {
              // Show details
              setSelectedHotspot(hotspot);
              setNewHotspotData({
                title: hotspot.title,
                description: hotspot.description,
                type: hotspot.type,
                compliance: hotspot.compliance
              });
              setShowHotspotDialog(true);
            }
          }}
        >
          {isEditMode && (
            <Box sx={{ 
              position: 'absolute', 
              top: '-20px', 
              right: '0', 
              display: 'flex',
              gap: '4px'
            }}>
              <IconButton 
                size="small" 
                sx={{ bgcolor: 'background.paper', p: '2px' }}
                onClick={(e) => {
                  e.stopPropagation();
                  handleEditHotspot(hotspot);
                }}
              >
                <Edit fontSize="small" />
              </IconButton>
              <IconButton 
                size="small" 
                sx={{ bgcolor: 'background.paper', p: '2px' }}
                onClick={(e) => {
                  e.stopPropagation();
                  handleDeleteHotspot(hotspot.id);
                }}
              >
                <Delete fontSize="small" />
              </IconButton>
            </Box>
          )}
          <Typography 
            variant="caption" 
            sx={{ 
              color: 'white', 
              backgroundColor: 'rgba(0,0,0,0.6)', 
              p: '2px 4px',
              borderRadius: '2px',
              pointerEvents: 'none' // Prevent text from interfering with drag
            }}
          >
            {hotspot.compliance.toFixed(0)}% Compliant
          </Typography>
        </Box>
      );
    });
  };

  // Calculate power consumption based on load schedule
  const calculatePowerConsumption = (loadSchedule: LoadSchedule) => {
    // Calculate daily energy consumption (kWh) assuming 8 hours of operation
    const dailyEnergyConsumption = (loadSchedule.totalDemandLoad / 1000) * 8; // kWh
    
    // Calculate monthly energy consumption (kWh) assuming 22 working days
    const monthlyEnergyConsumption = dailyEnergyConsumption * 22; // kWh
    
    // Calculate annual energy consumption (kWh)
    const annualEnergyConsumption = monthlyEnergyConsumption * 12; // kWh
    
    // Calculate energy cost (PHP) assuming PHP 10 per kWh
    const electricityRate = 10; // PHP per kWh
    const annualEnergyCost = annualEnergyConsumption * electricityRate; // PHP
    
    // Calculate power density (W/m²)
    const room = DETAILED_ROOMS[selectedFloor as keyof typeof DETAILED_ROOMS]?.find(r => r.id === loadSchedule.roomId);
    const roomArea = room?.area || 1; // m²
    const powerDensity = loadSchedule.totalDemandLoad / roomArea; // W/m²
    
    // Calculate apparent power (VA)
    const apparentPower = loadSchedule.totalDemandLoad / loadSchedule.powerFactor; // VA
    
    // Calculate reactive power (VAR)
    const reactivePower = Math.sqrt(Math.pow(apparentPower, 2) - Math.pow(loadSchedule.totalDemandLoad, 2)); // VAR
    
    // Return power calculation results
    return {
      loadSchedule,
      dailyEnergyConsumption,
      monthlyEnergyConsumption,
      annualEnergyConsumption,
      annualEnergyCost,
      powerDensity,
      apparentPower,
      reactivePower
    };
  };

  // Handle load schedule selection
  const handleLoadScheduleClick = (roomId: string) => {
    const loadSchedules = LOAD_SCHEDULES[selectedFloor as keyof typeof LOAD_SCHEDULES] || [];
    const loadSchedule = loadSchedules.find(ls => ls.roomId === roomId);
    
    if (loadSchedule) {
      // Create a deep copy for editing
      const editableSchedule = JSON.parse(JSON.stringify(loadSchedule));
      
      setSelectedLoadSchedule(editableSchedule);
      setShowLoadScheduleDialog(true);
      const results = calculatePowerConsumption(loadSchedule);
      setPowerCalculationResults(results);
      
      // Update room energy usage in BUILDING_DATA
      updateRoomData(roomId, {
        energyUsage: results.monthlyEnergyConsumption
      });
    }
  };

  // Add function to handle load item changes
  const handleLoadItemChange = (index: number, field: keyof LoadItem, value: number | string) => {
    if (!selectedLoadSchedule) return;
    
    const updatedItems = [...selectedLoadSchedule.items];
    
    if (field === 'description' || field === 'circuitBreaker' || field === 'conductorSize') {
      // Handle string fields
      updatedItems[index] = {
        ...updatedItems[index],
        [field]: value as string
      };
    } else {
      // Handle number fields
      const numValue = typeof value === 'string' ? parseFloat(value) : value;
      updatedItems[index] = {
        ...updatedItems[index],
        [field]: numValue
      };
      
      // Recalculate connected and demand loads
      if (field === 'quantity' || field === 'rating' || field === 'demandFactor') {
        const item = updatedItems[index];
        item.connectedLoad = item.quantity * item.rating;
        item.demandLoad = item.connectedLoad * item.demandFactor;
      }
    }
    
    // Calculate total connected and demand loads
    const totalConnectedLoad = updatedItems.reduce((sum, item) => sum + item.connectedLoad, 0);
    const totalDemandLoad = updatedItems.reduce((sum, item) => sum + item.demandLoad, 0);
    
    // Calculate current
    const current = totalDemandLoad / (selectedLoadSchedule.voltage * selectedLoadSchedule.powerFactor);
    
    setSelectedLoadSchedule({
      ...selectedLoadSchedule,
      items: updatedItems,
      totalConnectedLoad,
      totalDemandLoad,
      current
    });
  };

  // Add function to save load schedule changes
  const handleSaveLoadSchedule = () => {
    if (!selectedLoadSchedule) return;
    
    // Update the load schedule in the LOAD_SCHEDULES object
    const floor = selectedFloor as keyof typeof LOAD_SCHEDULES;
    const schedules = [...LOAD_SCHEDULES[floor] || []];
    const scheduleIndex = schedules.findIndex(ls => ls.id === selectedLoadSchedule.id);
    
    if (scheduleIndex >= 0) {
      schedules[scheduleIndex] = selectedLoadSchedule;
      LOAD_SCHEDULES[floor] = schedules;
      
      // Recalculate power consumption
      const results = calculatePowerConsumption(selectedLoadSchedule);
      setPowerCalculationResults(results);
      
      // Update room energy usage in BUILDING_DATA
      updateRoomData(selectedLoadSchedule.roomId, {
        energyUsage: results.monthlyEnergyConsumption
      });
    }
  };

  // Update Detailed Room Information when calculations are performed
  useEffect(() => {
    if (calculationResults) {
      // Update room data in BUILDING_DATA
      updateRoomData(calculationResults.room.id, {
        energyUsage: calculationResults.monthlyConsumption,
        area: calculationResults.room.area,
        actualLumens: calculationResults.averageIlluminance * calculationResults.room.area
      });
    }
  }, [calculationResults]);

  // Update room data when power calculations are performed
  useEffect(() => {
    if (powerCalculationResults && selectedLoadSchedule) {
      // Update room data in BUILDING_DATA
      updateRoomData(selectedLoadSchedule.roomId, {
        energyUsage: powerCalculationResults.monthlyEnergyConsumption
      });
    }
  }, [powerCalculationResults, selectedLoadSchedule]);

  // Helper function to update room data
  const updateRoomData = (roomId: string, updates: Partial<Room>) => {
    const floor = selectedFloor as keyof typeof BUILDING_DATA.rooms;
    const roomIndex = BUILDING_DATA.rooms[floor]?.findIndex(r => r.id === roomId);
    
    if (roomIndex !== undefined && roomIndex >= 0) {
      // Update the room data
      const updatedRooms = [...BUILDING_DATA.rooms[floor]];
      updatedRooms[roomIndex] = {
        ...updatedRooms[roomIndex],
        ...updates
      };
      
      BUILDING_DATA.rooms[floor] = updatedRooms;
      
      // Force re-render of detailed room information
      setRefreshKey(prev => prev + 1);
    }
  };

  // Updated Detailed Room Information Table
  const renderDetailedRoomInformationTable = () => {
    // Get rooms from both sources to ensure all rooms are included
    const buildingRooms = BUILDING_DATA.rooms[selectedFloor as keyof typeof BUILDING_DATA.rooms] as Room[] || [];
    const detailedRooms = DETAILED_ROOMS[selectedFloor as keyof typeof DETAILED_ROOMS] || [];
    
    // Create a merged list of rooms with unique IDs
    const allRoomIds = new Set([
      ...buildingRooms.map(r => r.id),
      ...detailedRooms.map(r => r.id)
    ]);
    
    // Create a complete room list
    const allRooms: Room[] = [];
    
    allRoomIds.forEach(id => {
      const buildingRoom = buildingRooms.find(r => r.id === id);
      const detailedRoom = detailedRooms.find(r => r.id === id);
      
      if (buildingRoom) {
        // Use building room data but update with detailed room data if available
        const room = {...buildingRoom};
        if (detailedRoom) {
          room.area = detailedRoom.area;
          room.energyUsage = calculateEnergyConsumption(detailedRoom.area, detailedRoom.roomType);
        }
        allRooms.push(room);
      } else if (detailedRoom) {
        // Convert detailed room to building room format
        allRooms.push({
          id: detailedRoom.id,
          name: detailedRoom.name,
          type: detailedRoom.roomType,
          area: detailedRoom.area,
          energyUsage: calculateEnergyConsumption(detailedRoom.area, detailedRoom.roomType)
        });
      }
    });
    
    // Filter by room type if needed
    const filteredRooms = selectedRoomType === 'all' 
      ? allRooms
      : allRooms.filter(room => room.type === selectedRoomType);
    
    return (
      <Paper sx={{ p: 2, mb: 3 }} key={`room-info-table-${refreshKey}`}>
        <Typography variant="h6" gutterBottom>
          Detailed Room Information - {BUILDING_DATA.floors.find(f => f.id === selectedFloor)?.name}
        </Typography>
        <Typography variant="body2" color="text.secondary" gutterBottom>
          {viewMode === 'lighting' 
            ? 'Energy calculations based on illumination requirements and lamp specifications' 
            : 'Energy calculations based on connected loads and demand factors'}
        </Typography>
        <TableContainer>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell>Room Name</TableCell>
                <TableCell>Type</TableCell>
                <TableCell align="right">Area (m²)</TableCell>
                <TableCell align="right">Energy Usage (kWh/month)</TableCell>
                <TableCell align="right">Energy Intensity (kWh/m²)</TableCell>
                <TableCell>Efficiency Rating</TableCell>
                <TableCell>PEC Compliance</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredRooms.map((room) => {
                const energyIntensity = calculateEnergyIntensity(room);
                const efficiencyRating = getEnergyEfficiencyRating(energyIntensity, room.type);
                const complianceData = COMPLIANCE_DATA[selectedFloor as keyof typeof COMPLIANCE_DATA];
                
                return (
                  <TableRow key={`room-row-${room.id}-${refreshKey}`}>
                    <TableCell>
                      <Typography variant="body2">{room.name}</Typography>
                    </TableCell>
                    <TableCell sx={{ textTransform: 'capitalize' }}>{room.type}</TableCell>
                    <TableCell align="right">{room.area.toFixed(1)}</TableCell>
                    <TableCell align="right">{room.energyUsage.toFixed(1)}</TableCell>
                    <TableCell align="right">{energyIntensity.toFixed(2)}</TableCell>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box
                          sx={{
                            width: 10,
                            height: 10,
                            borderRadius: '50%',
                            bgcolor: 
                              efficiencyRating === 'Excellent' ? 'success.main' : 
                              efficiencyRating === 'Good' ? '#8bc34a' :
                              efficiencyRating === 'Average' ? 'warning.main' : 'error.main',
                            mr: 1
                          }}
                        />
                        <Typography variant="body2">
                          {efficiencyRating}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      {complianceData && (
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Box
                            sx={{
                              width: 10,
                              height: 10,
                              borderRadius: '50%',
                              bgcolor: complianceData.lighting.percentage >= 60 ? 'success.main' : complianceData.lighting.percentage >= 30 ? 'warning.main' : 'error.main',
                              mr: 1
                            }}
                          />
                          <Typography variant="body2">
                            {complianceData.lighting.percentage >= 60 ? 'Good' : complianceData.lighting.percentage >= 30 ? 'Needs Improvement' : 'Non-compliant'}
                          </Typography>
                        </Box>
                      )}
                    </TableCell>
                    <TableCell>
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <Tooltip title="Calculate Illumination">
                          <IconButton 
                            size="small" 
                            onClick={() => handleRoomClick(room.id)}
                            disabled={viewMode !== 'lighting'}
                          >
                            <LightbulbOutlined fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="View Load Schedule">
                          <IconButton 
                            size="small" 
                            onClick={() => handleLoadScheduleClick(room.id)}
                            disabled={viewMode !== 'power' || !LOAD_SCHEDULES[selectedFloor as keyof typeof LOAD_SCHEDULES]?.some(ls => ls.roomId === room.id)}
                          >
                            <PowerSettingsNew fontSize="small" />
                          </IconButton>
                        </Tooltip>
                      </Box>
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
    );
  };

  // Handle editing room name
  const handleEditRoomName = (roomId: string, newName: string) => {
    updateRoomData(roomId, { name: newName });
  };

  // Add event listeners for drag operations
  useEffect(() => {
    if (isEditMode) {
      // For room dragging
      const handleMouseMove = (e: MouseEvent) => {
        if (draggedRoom) {
          handleRoomDragMove(e as unknown as React.MouseEvent);
        } else if (editingHotspot) {
          handleHotspotDrag(e as unknown as React.MouseEvent);
        }
      };
      
      const handleMouseUp = () => {
        if (draggedRoom) {
          handleRoomDragEnd();
        } else if (editingHotspot) {
          handleHotspotDragEnd();
        }
      };
      
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isEditMode, draggedRoom, editingHotspot, selectedFloor, dragOffset]);

  // Update container rect when container ref changes
  useEffect(() => {
    if (containerRef.current) {
      const updateContainerRect = () => {
        setContainerRect(containerRef.current?.getBoundingClientRect() || null);
      };
      
      // Initial update
      updateContainerRect();
      
      // Update on resize
      window.addEventListener('resize', updateContainerRect);
      
      return () => {
        window.removeEventListener('resize', updateContainerRect);
      };
    }
  }, [containerRef.current]);

  // Function to get detailed rooms for the current floor
  const getDetailedRoomsForFloor = (): RoomDetail[] => {
    return DETAILED_ROOMS[selectedFloor as keyof typeof DETAILED_ROOMS] || [];
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>Building Energy Visualization</Typography>
      <Typography variant="subtitle1" gutterBottom color="text.secondary">
        Visualize energy consumption patterns across different areas of the building
      </Typography>

      <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>
        <Tab label="Floor Plan View" />
        <Tab label="Energy Usage Charts" />
        <Tab label="Energy Distribution" />
      </Tabs>

      {activeTab === 0 && (
        <Box>
          <Paper sx={{ p: 2, mb: 3, bgcolor: 'info.light' }}>
            <Typography variant="subtitle1" gutterBottom>
              <InfoOutlined sx={{ verticalAlign: 'middle', mr: 1 }} />
              How to Use This Visualization
            </Typography>
            <Typography variant="body2" paragraph>
              This visualization shows the actual floor plans of the UCLM Old Building with PEC compliance data overlaid.
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={4}>
                <Typography variant="body2">
                  • Toggle between <strong>Lighting</strong> and <strong>Power</strong> layouts using the buttons above
                </Typography>
              </Grid>
              <Grid item xs={12} md={4}>
                <Typography variant="body2">
                  • Highlighted areas on the floor plan indicate potential issues or compliance concerns
                </Typography>
              </Grid>
              <Grid item xs={12} md={4}>
                <Typography variant="body2">
                  • Hover over the highlighted areas to see detailed information about compliance status
                </Typography>
              </Grid>
            </Grid>
          </Paper>

          <Paper sx={{ p: 2, mb: 3 }}>
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} sm={4} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel id="floor-select-label">Floor</InputLabel>
                  <Select
                    labelId="floor-select-label"
                    value={selectedFloor}
                    label="Floor"
                    onChange={handleFloorChange}
                  >
                    {BUILDING_DATA.floors.map(floor => (
                      <MenuItem key={floor.id} value={floor.id}>{floor.name}</MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={4} md={3}>
                <ToggleButtonGroup
                  value={viewMode}
                  exclusive
                  onChange={handleViewModeChange}
                  size="small"
                  aria-label="floor plan view mode"
                  fullWidth
                >
                  <ToggleButton value="lighting" aria-label="lighting layout">
                    <LightMode fontSize="small" sx={{ mr: 1 }} />
                    Lighting
                  </ToggleButton>
                  <ToggleButton value="power" aria-label="power layout">
                    <PowerSettingsNew fontSize="small" sx={{ mr: 1 }} />
                    Power
                  </ToggleButton>
                </ToggleButtonGroup>
              </Grid>
              <Grid item xs={12} sm={4} md={3}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Tooltip title="Zoom In">
                    <IconButton onClick={handleZoomIn}>
                      <ZoomIn />
                    </IconButton>
                  </Tooltip>
                  <Tooltip title="Zoom Out">
                    <IconButton onClick={handleZoomOut}>
                      <ZoomOut />
                    </IconButton>
                  </Tooltip>
                  <Tooltip title={isFullscreen ? "Exit Fullscreen" : "Fullscreen"}>
                    <IconButton onClick={toggleFullscreen}>
                      {isFullscreen ? <FullscreenExit /> : <Fullscreen />}
                    </IconButton>
                  </Tooltip>
                  <Tooltip title="Reset View">
                    <IconButton onClick={() => setZoomLevel(1)}>
                      <Refresh />
                    </IconButton>
                  </Tooltip>
                </Box>
              </Grid>
            </Grid>
          </Paper>

          {/* CORRECT ORDER: First show mode-specific analysis (Power Distribution Analysis or Lighting Layout) */}
          {viewMode === 'power' && (
            <Paper sx={{ p: 2, mb: 3 }}>
              <Typography variant="h6" gutterBottom>Power Distribution Analysis</Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Analysis of power distribution system based on PEC standards and DOE guidelines
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={12} md={4}>
                  <Typography variant="body2">
                    • Connected Load: Total power rating of all electrical equipment
                  </Typography>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Typography variant="body2">
                    • Demand Load: Actual power consumption considering demand factors
                  </Typography>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Typography variant="body2">
                    • Power Density: Watts per square meter (W/m²)
                  </Typography>
                </Grid>
              </Grid>
            </Paper>
          )}

          {viewMode === 'lighting' && (
            <Paper sx={{ p: 2, mb: 3 }}>
              <Typography variant="h6" gutterBottom>Lighting Layout</Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Lighting layout showing fixture locations and illumination levels
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={12} md={4}>
                  <Typography variant="body2">
                    • Illumination: Measured in lux (lx) as per PEC requirements
                  </Typography>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Typography variant="body2">
                    • Fixture Types: LED, fluorescent, and other lighting fixtures
                  </Typography>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Typography variant="body2">
                    • Compliance: Based on Philippine Electrical Code requirements
                  </Typography>
                </Grid>
              </Grid>
            </Paper>
          )}

          {/* FLOOR PLAN SECTION - The main visualization */}
          <Paper 
            sx={{ 
              p: 2, 
              mb: 3, 
              height: isFullscreen ? 'calc(100vh - 250px)' : 'auto',
              minHeight: '600px',
              overflow: 'auto',
              position: 'relative'
            }}
          >
            <Box 
              sx={{ 
                transformOrigin: 'top left',
                transition: 'transform 0.3s ease',
                width: '100%',
                height: '100%',
                overflowX: 'auto'
              }}
            >
              <Typography variant="h6" gutterBottom>
                {BUILDING_DATA.floors.find(f => f.id === selectedFloor)?.name} - {viewMode === 'lighting' ? 'Lighting' : 'Power'} Layout
              </Typography>
              
              {/* Edit mode controls */}
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, flexWrap: 'wrap' }}>
                <Button
                  variant={isEditMode ? "contained" : "outlined"}
                  color={isEditMode ? "warning" : "primary"}
                  size="small"
                  onClick={() => {
                    setIsEditMode(!isEditMode);
                    if (!isEditMode) {
                      setDrawMode('move');
                    } else {
                      setDrawMode(null);
                    }
                  }}
                  startIcon={isEditMode ? <Close /> : <Edit />}
                  sx={{ mr: 2, mb: 1 }}
                >
                  {isEditMode ? "Exit Edit Mode" : "Edit Room Areas"}
                </Button>
                
                {isEditMode && (
                  <>
                    <ToggleButtonGroup
                      value={drawMode}
                      exclusive
                      onChange={(_, newMode) => {
                        if (newMode) setDrawMode(newMode);
                      }}
                      size="small"
                      sx={{ mr: 2, mb: 1 }}
                    >
                      <ToggleButton value="move">
                        <Tooltip title="Move rooms">
                          <PanTool fontSize="small" />
                        </Tooltip>
                      </ToggleButton>
                      <ToggleButton value="resize">
                        <Tooltip title="Resize rooms">
                          <Crop fontSize="small" />
                        </Tooltip>
                      </ToggleButton>
                      <ToggleButton value="draw">
                        <Tooltip title="Draw custom shapes">
                          <FormatShapes fontSize="small" />
                        </Tooltip>
                      </ToggleButton>
                    </ToggleButtonGroup>
                    
                    <Button
                      variant="outlined"
                      size="small"
                      color="primary"
                      onClick={() => setShowLabels(!showLabels)}
                      startIcon={<TextFields />}
                      sx={{ mr: 2, mb: 1 }}
                    >
                      {showLabels ? "Hide Labels" : "Show Labels"}
                    </Button>
                    
                    <Button
                      variant="outlined"
                      size="small"
                      color="success"
                      onClick={() => setShowNewRoomDialog(true)}
                      startIcon={<Add />}
                      sx={{ mr: 2, mb: 1 }}
                    >
                      Add Room
                    </Button>
                    
                    <Button
                      variant="outlined"
                      size="small"
                      color="info"
                      onClick={handleAddHotspot}
                      startIcon={<InfoOutlined />}
                      sx={{ mr: 2, mb: 1 }}
                    >
                      Add Non-compliant Area
                    </Button>
                    
                    <Button
                      variant="contained"
                      size="small"
                      color="secondary"
                      onClick={saveRoomData}
                      startIcon={<Save />}
                      sx={{ mr: 2, mb: 1 }}
                    >
                      Save Layout
                    </Button>
                    
                    {drawMode === 'draw' && drawingPoints.length > 0 && (
                      <>
                        <Button
                          variant="contained"
                          size="small"
                          color="success"
                          onClick={handleFinishDrawing}
                          sx={{ mr: 1, mb: 1 }}
                        >
                          Finish Shape
                        </Button>
                        <Button
                          variant="outlined"
                          size="small"
                          color="error"
                          onClick={handleCancelDrawing}
                          sx={{ mb: 1 }}
                        >
                          Cancel
                        </Button>
                      </>
                    )}
                  </>
                )}
              </Box>
              
              {/* Compliance information summary */}
              <Box sx={{ mb: 2 }}>
                {selectedFloor && COMPLIANCE_DATA[selectedFloor as keyof typeof COMPLIANCE_DATA] && (
                  <Grid container spacing={2}>
                    <Grid item xs={12} md={4}>
                      <Typography variant="body2">
                        <strong>Lighting Compliance:</strong> {COMPLIANCE_DATA[selectedFloor as keyof typeof COMPLIANCE_DATA].lighting.percentage.toFixed(2)}%
                      </Typography>
                    </Grid>
                    <Grid item xs={12} md={4}>
                      <Typography variant="body2">
                        <strong>Outlets Compliance:</strong> {COMPLIANCE_DATA[selectedFloor as keyof typeof COMPLIANCE_DATA].outlets.percentage.toFixed(2)}%
                      </Typography>
                    </Grid>
                    <Grid item xs={12} md={4}>
                      <Typography variant="body2">
                        <strong>Protection Compliance:</strong> {COMPLIANCE_DATA[selectedFloor as keyof typeof COMPLIANCE_DATA].protection.percentage.toFixed(2)}%
                      </Typography>
                    </Grid>
                  </Grid>
                )}
              </Box>
              
              {/* Instructions for interaction */}
              {viewMode === 'lighting' && !isEditMode && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  <Typography variant="body2">
                    Click on highlighted room areas to view detailed illumination calculations
                  </Typography>
                </Alert>
              )}
              
              {viewMode === 'power' && !isEditMode && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  <Typography variant="body2">
                    Click on highlighted room areas to view detailed load schedule information
                  </Typography>
                </Alert>
              )}
              
              {isEditMode && (
                <Alert severity="warning" sx={{ mb: 2 }}>
                  <Typography variant="body2">
                    <strong>Edit Mode:</strong> {
                      drawMode === 'move' ? 'Drag room indicators to position them' :
                      drawMode === 'resize' ? 'Drag handles to resize room areas' :
                      drawMode === 'draw' ? 'Click to add points to create custom shapes' :
                      'Select an edit mode'
                    }
                  </Typography>
                </Alert>
              )}
              
              {/* Actual floor plan image display */}
              <Box 
                sx={{ 
                  display: 'flex', 
                  justifyContent: 'center',
                  position: 'relative' 
                }}
              >
                {/* Floor plan images and overlays */}
                <Box
                  ref={containerRef}
                  sx={{
                    position: 'relative',
                    width: '100%',
                    maxWidth: '1200px',
                    height: '600px',
                    border: '1px solid #ccc',
                    transform: `scale(${zoomLevel})`,
                    cursor: isEditMode ? (
                      drawMode === 'move' ? 'move' :
                      drawMode === 'resize' ? 'crosshair' :
                      drawMode === 'draw' ? 'crosshair' : 'default'
                    ) : 'default',
                    overflow: 'hidden',
                    '&:hover': {
                      borderColor: isEditMode ? 'primary.main' : '#ccc'
                    }
                  }}
                  onClick={handleCanvasClick}
                  onMouseDown={e => {
                    // Prevent default behavior to avoid text selection
                    e.preventDefault();
                  }}
                >
                  {/* Base floor plan image - FIXED IMAGE PATH */}
                  <img
                    key={`floorplan-${selectedFloor}-${viewMode}-${refreshKey}`}
                    src={processFloorPlanImage(FLOOR_PLAN_IMAGES[selectedFloor as keyof typeof FLOOR_PLAN_IMAGES]?.[viewMode]) || '/floorplan/placeholder.jpg'}
                    alt={`${BUILDING_DATA.floors.find(f => f.id === selectedFloor)?.name} ${viewMode === 'lighting' ? 'Lighting' : 'Power'} Layout`}
                    style={{
                      width: '100%',
                      height: '100%',
                      objectFit: 'contain',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      opacity: 0.7 // Make the background image slightly transparent for better visibility of overlays
                    }}
                    onError={handleImageError}
                    ref={imageRef}
                  />
                  
                  {/* Render room areas */}
                  {renderRoomAreas()}
                  
                  {/* Render non-compliant areas */}
                  {renderNonCompliantAreas()}
                  
                  {/* Drawing overlay for custom shapes */}
                  {isEditMode && drawMode === 'draw' && drawingPoints.length > 0 && (
                    <svg
                      width="100%"
                      height="100%"
                      style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        pointerEvents: 'none'
                      }}
                    >
                      <polyline
                        points={drawingPoints.map(p => `${p.x},${p.y}`).join(' ')}
                        fill="none"
                        stroke="#2196f3"
                        strokeWidth="2"
                        strokeDasharray="5,5"
                      />
                    </svg>
                  )}
                </Box>
              </Box>
            </Box>
          </Paper>

          {/* CORRECT ORDER: Now show the appropriate components for the selected mode */}
          {viewMode === 'lighting' && (
            <>
              {/* 2. Floor Illumination Summary - Only for lighting mode */}
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Floor Illumination Summary</Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  Summary of illumination levels across different rooms on this floor
                </Typography>
                <FloorIlluminationSummary 
                  floor={selectedFloor} 
                  rooms={getDetailedRoomsForFloor()} 
                  selectedLampType={selectedLampType} 
                />
              </Paper>

              {/* 3. Interactive Rooms - Illumination Calculator - Only for lighting mode */}
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Interactive Rooms - Illumination Calculator</Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  Calculate illumination requirements based on PEC standards
                </Typography>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={6} md={4}>
                    <FormControl fullWidth size="small">
                      <InputLabel id="lamp-type-label">Lamp Type</InputLabel>
                      <Select
                        labelId="lamp-type-label"
                        value={selectedLampType}
                        label="Lamp Type"
                        onChange={handleLampTypeChange}
                      >
                        {LAMP_TYPES.map(lamp => (
                          <MenuItem key={lamp.id} value={lamp.id}>
                            {lamp.name} ({lamp.wattage}W, {lamp.lumens} lm)
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12} sm={6} md={4}>
                    <Button
                      variant="outlined"
                      startIcon={<Add />}
                      onClick={() => setShowAddLampDialog(true)}
                      size="small"
                      fullWidth
                    >
                      Add Custom Lamp
                    </Button>
                  </Grid>
                  <Grid item xs={12} sm={6} md={4}>
                    <Button
                      variant="contained"
                      startIcon={<Calculate />}
                      onClick={() => {
                        if (selectedRoom && selectedLampType) {
                          calculateIllumination(selectedRoom, selectedLampType);
                          setShowCalculationModal(true);
                        } else {
                          alert('Please select a room and lamp type first');
                        }
                      }}
                      disabled={!selectedRoom || !selectedLampType}
                      size="small"
                      fullWidth
                    >
                      Calculate Illumination
                    </Button>
                  </Grid>
                </Grid>
              </Paper>
            </>
          )}

          {viewMode === 'power' && (
            <>
              {/* 2. Power Layout - Only for power mode */}
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Power Layout</Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  Power distribution layout showing electrical circuits and protection devices
                </Typography>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={4}>
                    <Typography variant="body2">
                      • Circuit Breakers: Locations and ratings of circuit protection devices
                    </Typography>
                  </Grid>
                  <Grid item xs={12} md={4}>
                    <Typography variant="body2">
                      • Outlets: Locations and types of electrical outlets
                    </Typography>
                  </Grid>
                  <Grid item xs={12} md={4}>
                    <Typography variant="body2">
                      • Panels: Distribution panels and their connected loads
                    </Typography>
                  </Grid>
                </Grid>
              </Paper>

              {/* 3. Floor Schedule of Load Summary - Only for power mode */}
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Floor Schedule of Load Summary</Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  Summary of electrical loads by panel for this floor
                </Typography>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Panel</TableCell>
                        <TableCell>Connected Load (W)</TableCell>
                        <TableCell>Demand Load (W)</TableCell>
                        <TableCell>Current (A)</TableCell>
                        <TableCell>Power Factor</TableCell>
                        <TableCell>Action</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {LOAD_SCHEDULES[selectedFloor as keyof typeof LOAD_SCHEDULES]?.filter((schedule: LoadSchedule) => {
                        const room = BUILDING_DATA.rooms[selectedFloor as keyof typeof BUILDING_DATA.rooms]?.find(r => r.id === schedule.roomId);
                        return room !== undefined;
                      })
                      .map((schedule: LoadSchedule) => (
                        <TableRow key={schedule.id}>
                          <TableCell>{schedule.panelName}</TableCell>
                          <TableCell>{schedule.totalConnectedLoad.toFixed(0)} W</TableCell>
                          <TableCell>{schedule.totalDemandLoad.toFixed(0)} W</TableCell>
                          <TableCell>{schedule.current.toFixed(2)} A</TableCell>
                          <TableCell>{schedule.powerFactor.toFixed(2)}</TableCell>
                          <TableCell>
                            <Button
                              size="small"
                              variant="text"
                              onClick={() => {
                                setSelectedLoadSchedule(schedule);
                                setShowLoadScheduleDialog(true);
                              }}
                            >
                              View Details
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </>
          )}

          {/* COMMON SECTIONS FOR BOTH MODES */}
          {/* 4. Detailed Room Information Table - Common for both modes */}
          <Paper sx={{ p: 2, mb: 3 }}>
            <Typography variant="h6" gutterBottom>Detailed Room Information</Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              Detailed information about each room on the selected floor
            </Typography>
            {renderDetailedRoomInformationTable()}
          </Paper>

          {/* 5. Legend - Common for both modes */}
          <Paper sx={{ p: 2, mb: 3 }}>
            <Typography variant="h6" gutterBottom>Legend</Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              Color coding and symbols used in the visualization
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>Room Types</Typography>
                <Grid container spacing={1}>
                  {Object.entries(ROOM_TYPE_COLORS).map(([type, color]) => (
                    <Grid item xs={6} key={type}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box sx={{ width: 16, height: 16, bgcolor: color, mr: 1 }} />
                        <Typography variant="body2">{type.charAt(0).toUpperCase() + type.slice(1)}</Typography>
                      </Box>
                    </Grid>
                  ))}
                </Grid>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>Compliance Status</Typography>
                <Grid container spacing={1}>
                  <Grid item xs={6}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: 16, height: 16, bgcolor: 'success.main', mr: 1 }} />
                      <Typography variant="body2">Compliant</Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={6}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: 16, height: 16, bgcolor: 'error.main', mr: 1 }} />
                      <Typography variant="body2">Non-Compliant</Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={6}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: 16, height: 16, bgcolor: 'warning.main', mr: 1 }} />
                      <Typography variant="body2">Needs Review</Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={6}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: 16, height: 16, bgcolor: 'info.main', mr: 1 }} />
                      <Typography variant="body2">Not Applicable</Typography>
                    </Box>
                  </Grid>
                </Grid>
              </Grid>
            </Grid>
          </Paper>

          {/* 6. Energy Efficiency Rating - Common for both modes */}
          <Paper sx={{ p: 2, mb: 3 }}>
            <Typography variant="h6" gutterBottom>Energy Efficiency Rating</Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              Energy efficiency ratings based on energy intensity (kWh/m²) according to DOE standards
            </Typography>
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Rating</TableCell>
                    <TableCell>Energy Intensity (kWh/m²)</TableCell>
                    <TableCell>Description</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  <TableRow>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box sx={{ width: 10, height: 10, borderRadius: '50%', bgcolor: 'success.main', mr: 1 }} />
                        <Typography variant="body2">Excellent</Typography>
                      </Box>
                    </TableCell>
                    <TableCell>&lt; 5</TableCell>
                    <TableCell>Exceeds energy efficiency standards</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box sx={{ width: 10, height: 10, borderRadius: '50%', bgcolor: '#8bc34a', mr: 1 }} />
                        <Typography variant="body2">Good</Typography>
                      </Box>
                    </TableCell>
                    <TableCell>5 - 10</TableCell>
                    <TableCell>Meets energy efficiency standards</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box sx={{ width: 10, height: 10, borderRadius: '50%', bgcolor: 'warning.main', mr: 1 }} />
                        <Typography variant="body2">Average</Typography>
                      </Box>
                    </TableCell>
                    <TableCell>10 - 15</TableCell>
                    <TableCell>Meets minimum standards</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box sx={{ width: 10, height: 10, borderRadius: '50%', bgcolor: 'error.main', mr: 1 }} />
                        <Typography variant="body2">Poor</Typography>
                      </Box>
                    </TableCell>
                    <TableCell>&gt; 15</TableCell>
                    <TableCell>Below energy efficiency standards</TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>

          {/* 7. PEC Compliance Status - Common for both modes */}
          <Paper sx={{ p: 2, mb: 3 }}>
            <Typography variant="h6" gutterBottom>PEC Compliance Status</Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              Compliance status based on Philippine Electrical Code 2017 requirements
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={4}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="subtitle1" color="primary" gutterBottom>
                      Lighting System Compliance
                    </Typography>
                    <Typography variant="body2" paragraph>
                      PEC Article 3 requirements:
                    </Typography>
                    <Box component="ul" sx={{ pl: 2 }}>
                      <Box component="li">
                        <Typography variant="body2">
                          Illumination levels must meet minimum requirements for each room type
                        </Typography>
                      </Box>
                      <Box component="li">
                        <Typography variant="body2">
                          Power density must not exceed PEC recommendations
                        </Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="subtitle1" color="primary" gutterBottom>
                      Power System Compliance
                    </Typography>
                    <Typography variant="body2" paragraph>
                      PEC Article 2.10 requirements:
                    </Typography>
                    <Box component="ul" sx={{ pl: 2 }}>
                      <Box component="li">
                        <Typography variant="body2">
                          Proper sizing of conductors and circuit breakers
                        </Typography>
                      </Box>
                      <Box component="li">
                        <Typography variant="body2">
                          Appropriate application of demand factors
                        </Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="subtitle1" color="primary" gutterBottom>
                      Protection Device Compliance
                    </Typography>
                    <Typography variant="body2" paragraph>
                      PEC Article 2.40 requirements:
                    </Typography>
                    <Box component="ul" sx={{ pl: 2 }}>
                      <Box component="li">
                        <Typography variant="body2">
                          Overcurrent protection for all circuits
                        </Typography>
                      </Box>
                      <Box component="li">
                        <Typography variant="body2">
                          Proper grounding and bonding
                        </Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Paper>
        </Box>
      )}

      {activeTab === 1 && (
        <Box>
          <Paper sx={{ p: 2, mb: 3 }}>
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} sm={4}>
                <FormControl fullWidth size="small">
                  <InputLabel id="time-range-label">Time Range</InputLabel>
                  <Select
                    labelId="time-range-label"
                    value={selectedTimeRange}
                    label="Time Range"
                    onChange={handleTimeRangeChange}
                  >
                    <MenuItem value="monthly">Monthly</MenuItem>
                    <MenuItem value="quarterly">Quarterly</MenuItem>
                    <MenuItem value="yearly">Yearly</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Paper>

          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Energy Consumption Trends</Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  Monthly energy consumption by category (kWh)
                </Typography>
                <Box sx={{ height: 400 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={BUILDING_DATA.energyData.monthly}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <RechartsTooltip />
                      <Legend />
                      <Line type="monotone" dataKey="lighting" stroke="#8884d8" activeDot={{ r: 8 }} />
                      <Line type="monotone" dataKey="hvac" stroke="#82ca9d" />
                      <Line type="monotone" dataKey="equipment" stroke="#ffc658" />
                      <Line type="monotone" dataKey="total" stroke="#ff7300" strokeWidth={2} />
                    </LineChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2 }}>
                <Typography variant="h6" gutterBottom>Lighting Compliance by Floor</Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  Percentage of lighting fixtures compliant with PEC standards
                </Typography>
                <Box sx={{ height: 300 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={Object.entries(COMPLIANCE_DATA).map(([floorId, data]) => ({
                        name: BUILDING_DATA.floors.find(f => f.id === floorId)?.name || floorId,
                        compliant: data.lighting.percentage,
                        nonCompliant: 100 - data.lighting.percentage
                      }))}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis />
                      <RechartsTooltip />
                      <Legend />
                      <Bar dataKey="compliant" name="Compliant (%)" fill="#4caf50" stackId="a" />
                      <Bar dataKey="nonCompliant" name="Non-Compliant (%)" fill="#f44336" stackId="a" />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2 }}>
                <Typography variant="h6" gutterBottom>Protection Device Compliance by Floor</Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  Percentage of protection devices compliant with PEC standards
                </Typography>
                <Box sx={{ height: 300 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={Object.entries(COMPLIANCE_DATA).map(([floorId, data]) => ({
                        name: BUILDING_DATA.floors.find(f => f.id === floorId)?.name || floorId,
                        compliant: data.protection.percentage,
                        nonCompliant: 100 - data.protection.percentage
                      }))}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis />
                      <RechartsTooltip />
                      <Legend />
                      <Bar dataKey="compliant" name="Compliant (%)" fill="#2196f3" stackId="a" />
                      <Bar dataKey="nonCompliant" name="Non-Compliant (%)" fill="#f44336" stackId="a" />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        </Box>
      )}

      {activeTab === 2 && (
        <Box>
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Energy Distribution by Category</Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  Percentage of total energy consumption by category (Based on DOE Energy Audit data)
                </Typography>
                <Box sx={{ height: 400 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={BUILDING_DATA.energyData.distribution}
                        cx="50%"
                        cy="50%"
                        labelLine={true}
                        outerRadius={120}
                        fill="#8884d8"
                        dataKey="value"
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                      >
                        {BUILDING_DATA.energyData.distribution.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <RechartsTooltip />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Overall Compliance Analysis</Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  Compliance across different electrical system components (Based on PEC standards)
                </Typography>
                <Box sx={{ height: 400 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={[
                        {
                          name: 'Lighting',
                          percentage: 36.62
                        },
                        {
                          name: 'Outlets',
                          percentage: 100.00
                        },
                        {
                          name: 'Protection',
                          percentage: 95.24
                        }
                      ]}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis domain={[0, 100]} />
                      <RechartsTooltip formatter={(value: number) => [`${value.toFixed(2)}%`, 'Compliance']} />
                      <Legend />
                      <Bar dataKey="percentage" name="Compliance %" fill="#ff7300">
                        {[
                          {name: 'Lighting', percentage: 36.62},
                          {name: 'Outlets', percentage: 100},
                          {name: 'Protection', percentage: 95.24}
                        ].map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={entry.percentage >= 80 ? '#4caf50' : entry.percentage >= 60 ? '#ff9800' : '#f44336'} 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12}>
              <Paper sx={{ p: 2 }}>
                <Typography variant="h6" gutterBottom>Electrical System Recommendations (Based on PEC 2017)</Typography>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined" sx={{ height: '100%' }}>
                      <CardContent>
                        <Typography variant="subtitle1" color="primary" gutterBottom>
                          Lighting System Compliance
                        </Typography>
                        <Typography variant="body2" paragraph>
                          PEC Article 3 requirements:
                        </Typography>
                        <Box component="ul" sx={{ pl: 2 }}>
                          <Box component="li" sx={{ mb: 1 }}>
                            <Typography variant="body2">
                              <strong>Current compliance:</strong> 36.62% building-wide
                            </Typography>
                          </Box>
                          <Box component="li" sx={{ mb: 1 }}>
                            <Typography variant="body2">
                              <strong>Third Floor:</strong> Lowest compliance at 16.66% (Table 14)
                            </Typography>
                          </Box>
                          <Box component="li">
                            <Typography variant="body2">
                              <strong>Recommendation:</strong> Replace non-compliant fixtures with PEC-compliant LED lighting
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined" sx={{ height: '100%' }}>
                      <CardContent>
                        <Typography variant="subtitle1" color="primary" gutterBottom>
                          Protection Device Compliance
                        </Typography>
                        <Typography variant="body2" paragraph>
                          PEC Article 2.40 requirements:
                        </Typography>
                        <Box component="ul" sx={{ pl: 2 }}>
                          <Box component="li" sx={{ mb: 1 }}>
                            <Typography variant="body2">
                              <strong>Fifth Floor:</strong> 71.43% compliance rate (Table 12)
                            </Typography>
                          </Box>
                          <Box component="li" sx={{ mb: 1 }}>
                            <Typography variant="body2">
                              <strong>Risk assessment:</strong> Non-compliant devices have high risk index
                            </Typography>
                          </Box>
                          <Box component="li">
                            <Typography variant="body2">
                              <strong>Recommendation:</strong> Replace all protective devices not meeting PEC 2.40
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined" sx={{ height: '100%' }}>
                      <CardContent>
                        <Typography variant="subtitle1" color="primary" gutterBottom>
                          Energy Efficiency Improvements
                        </Typography>
                        <Typography variant="body2" paragraph>
                          Based on DOE guidelines for educational buildings:
                        </Typography>
                        <Box component="ul" sx={{ pl: 2 }}>
                          <Box component="li" sx={{ mb: 1 }}>
                            <Typography variant="body2">
                              <strong>HVAC consumption:</strong> 52% of total building load
                            </Typography>
                          </Box>
                          <Box component="li" sx={{ mb: 1 }}>
                            <Typography variant="body2">
                              <strong>Potential savings:</strong> 15-30% through controls and maintenance
                            </Typography>
                          </Box>
                          <Box component="li">
                            <Typography variant="body2">
                              <strong>Recommendation:</strong> Implement ASHRAE 90.1-2019 HVAC standards
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        </Box>
      )}

      {/* Illumination Calculation Modal */}
      <Modal
        open={showCalculationModal}
        onClose={() => setShowCalculationModal(false)}
        aria-labelledby="illumination-modal-title"
        sx={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}
      >
        <Paper 
          sx={{ 
            width: '90%', 
            maxWidth: 1000, 
            maxHeight: '90vh', 
            p: 3, 
            overflow: 'auto',
            position: 'relative'
          }}
        >
          <IconButton
            sx={{ position: 'absolute', top: 8, right: 8 }}
            onClick={() => setShowCalculationModal(false)}
          >
            <Close />
          </IconButton>

          {selectedRoom && (
            <>
              <Typography variant="h5" id="illumination-modal-title" gutterBottom>
                <LightbulbOutlined sx={{ mr: 1, verticalAlign: 'top' }} />
                Illumination Calculations: {selectedRoom.name}
              </Typography>
              
              <Divider sx={{ mb: 2 }} />
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Card variant="outlined" sx={{ mb: 2 }}>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>Room Details</Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={6}>
                          <Typography variant="body2" color="text.secondary">Room Type</Typography>
                          <Typography variant="body1" sx={{ textTransform: 'capitalize' }}>
                            {selectedRoom.roomType}
                          </Typography>
                        </Grid>
                        
                        {/* Editable dimensions */}
                        <Grid item xs={12} sm={6}>
                          <Typography variant="body2" color="text.secondary">Calculated Area</Typography>
                          <Typography variant="body1">
                            {selectedRoom.area.toFixed(2)} m²
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={12} sm={4}>
                          <TextField
                            label="Length (m)"
                            name="length"
                            type="number"
                            value={roomDimensions.length}
                            onChange={handleDimensionChange}
                            fullWidth
                            margin="normal"
                            variant="outlined"
                            InputProps={{ inputProps: { min: 0.1, step: 0.1 } }}
                          />
                        </Grid>
                        
                        <Grid item xs={12} sm={4}>
                          <TextField
                            label="Width (m)"
                            name="width"
                            type="number"
                            value={roomDimensions.width}
                            onChange={handleDimensionChange}
                            fullWidth
                            margin="normal"
                            variant="outlined"
                            InputProps={{ inputProps: { min: 0.1, step: 0.1 } }}
                          />
                        </Grid>
                        
                        <Grid item xs={12} sm={4}>
                          <TextField
                            label="Height (m)"
                            name="height"
                            type="number"
                            value={roomDimensions.height}
                            onChange={handleDimensionChange}
                            fullWidth
                            margin="normal"
                            variant="outlined"
                            InputProps={{ inputProps: { min: 0.1, step: 0.1 } }}
                          />
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                  
                  <Card variant="outlined">
                    <CardContent>
                      <Typography variant="h6" gutterBottom>Illumination Requirements</Typography>
                      {calculationResults && (
                        <>
                          <Typography variant="body2" color="text.secondary">
                            Required Illuminance (PEC Article 3.9.2)
                          </Typography>
                          <Typography variant="body1" gutterBottom>
                            <strong>{calculationResults.requirement.requiredLux} lux</strong> ({calculationResults.requirement.description})
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            Reference
                          </Typography>
                          <Typography variant="body1" gutterBottom>
                            {calculationResults.requirement.reference}
                          </Typography>
                          
                          <Divider sx={{ my: 2 }} />
                          
                          <Typography variant="body2" color="text.secondary">
                            Select Lamp Type
                          </Typography>
                          <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                            <FormControl fullWidth sx={{ mr: 1 }}>
                              <InputLabel id="lamp-type-select-label">Lamp Type</InputLabel>
                              <Select
                                labelId="lamp-type-select-label"
                                value={selectedLampType}
                                label="Lamp Type"
                                onChange={handleLampTypeChange}
                              >
                                <MenuItem value="" disabled>Standard Lamps</MenuItem>
                                {LAMP_TYPES.map(lamp => (
                                  <MenuItem key={lamp.id} value={lamp.id}>
                                    {lamp.name} - {lamp.lumens} lm, {lamp.wattage}W
                                  </MenuItem>
                                ))}
                                
                                {customLampTypes.length > 0 && (
                                  <MenuItem value="" disabled>
                                    --------- Custom Lamps ---------
                                  </MenuItem>
                                )}
                                
                                {customLampTypes.map(lamp => (
                                  <MenuItem key={lamp.id} value={lamp.id}>
                                    {lamp.name} - {lamp.lumens} lm, {lamp.wattage}W (Custom)
                                  </MenuItem>
                                ))}
                              </Select>
                            </FormControl>
                            <Button 
                              variant="contained" 
                              color="primary"
                              size="small"
                              onClick={() => setShowCustomLampDialog(true)}
                            >
                              Add Custom
                            </Button>
                          </Box>
                          
                          {calculationResults.lampType && (
                            <Box sx={{ mt: 2 }}>
                              <Typography variant="body2" color="text.secondary">
                                Selected Lamp Specifications
                              </Typography>
                              <Grid container spacing={1} sx={{ mt: 0.5 }}>
                                <Grid item xs={6}>
                                  <Typography variant="body2">Output: {calculationResults.lampType.lumens} lumens</Typography>
                                </Grid>
                                <Grid item xs={6}>
                                  <Typography variant="body2">Power: {calculationResults.lampType.wattage} watts</Typography>
                                </Grid>
                                <Grid item xs={6}>
                                  <Typography variant="body2">Efficacy: {calculationResults.lampType.efficacy} lm/W</Typography>
                                </Grid>
                                <Grid item xs={6}>
                                  <Typography variant="body2">Life: {(calculationResults.lampType.lifeHours/1000).toFixed(0)}k hours</Typography>
                                </Grid>
                              </Grid>
                            </Box>
                          )}
                        </>
                      )}
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  {calculationResults && (
                    <>
                      <Card variant="outlined" sx={{ mb: 2 }}>
                        <CardContent>
                          <Typography variant="h6" gutterBottom>Calculation Results</Typography>
                          
                          <Grid container spacing={2}>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Required Lamps
                              </Typography>
                              <Typography variant="h5" color="primary">
                                {calculationResults.actualLamps}
                              </Typography>
                              <Typography variant="body2">
                                ({calculationResults.lampsAlongLength} × {calculationResults.lampsAlongWidth} grid)
                              </Typography>
                            </Grid>
                            
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Achieved Illuminance
                              </Typography>
                              <Typography 
                                variant="h5" 
                                color={calculationResults.averageIlluminance >= calculationResults.requirement.requiredLux ? "success.main" : "error.main"}
                              >
                                {Math.round(calculationResults.averageIlluminance)} lux
                              </Typography>
                              <Typography variant="body2">
                                Required: {calculationResults.requirement.requiredLux} lux
                              </Typography>
                            </Grid>
                          </Grid>
                          
                          <Divider sx={{ my: 2 }} />
                          
                          <Typography variant="subtitle2" gutterBottom>
                            Fixture Layout
                          </Typography>
                          <Grid container spacing={2}>
                            <Grid item xs={6}>
                              <Typography variant="body2">Spacing (Length):</Typography>
                              <Typography variant="body1">{calculationResults.spacingLength.toFixed(2)} m</Typography>
                            </Grid>
                            <Grid item xs={6}>
                              <Typography variant="body2">Spacing (Width):</Typography>
                              <Typography variant="body1">{calculationResults.spacingWidth.toFixed(2)} m</Typography>
                            </Grid>
                            <Grid item xs={12}>
                              <Box
                                sx={{
                                  width: '100%',
                                  height: 200,
                                  border: '1px solid #ccc',
                                  position: 'relative',
                                  mt: 1,
                                  bgcolor: '#f5f5f5'
                                }}
                              >
                                {/* Visual lamp layout diagram */}
                                {Array.from({ length: calculationResults.lampsAlongLength }).map((_, row) => (
                                  Array.from({ length: calculationResults.lampsAlongWidth }).map((_, col) => (
                                    <Box
                                      key={`lamp-${row}-${col}`}
                                      sx={{
                                        position: 'absolute',
                                        top: `${((row + 1) / (calculationResults.lampsAlongLength + 1)) * 100}%`,
                                        left: `${((col + 1) / (calculationResults.lampsAlongWidth + 1)) * 100}%`,
                                        transform: 'translate(-50%, -50%)',
                                        width: 20,
                                        height: 20,
                                        borderRadius: '50%',
                                        bgcolor: 'warning.main',
                                        boxShadow: '0 0 10px rgba(255, 152, 0, 0.5)',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center'
                                      }}
                                    >
                                      <LightbulbOutlined sx={{ fontSize: 14, color: 'white' }} />
                                    </Box>
                                  ))
                                ))}
                                <Typography 
                                  variant="caption" 
                                  sx={{ 
                                    position: 'absolute', 
                                    bottom: 5, 
                                    right: 5 
                                  }}
                                >
                                  Room dimensions: {calculationResults.room.length}m × {calculationResults.room.width}m
                                </Typography>
                              </Box>
                            </Grid>
                          </Grid>
                        </CardContent>
                      </Card>
                      
                      <Card variant="outlined">
                        <CardContent>
                          <Typography variant="h6" gutterBottom>Energy & Cost Analysis</Typography>
                          
                          <Grid container spacing={2}>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Total Installed Load
                              </Typography>
                              <Typography variant="body1">
                                {calculationResults.totalWattage} W ({calculationResults.powerDensity.toFixed(1)} W/m²)
                              </Typography>
                            </Grid>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Daily Energy Use (8h operation)
                              </Typography>
                              <Typography variant="body1">
                                {calculationResults.dailyConsumption.toFixed(1)} kWh
                              </Typography>
                            </Grid>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Monthly Energy Use
                              </Typography>
                              <Typography variant="body1">
                                {calculationResults.monthlyConsumption.toFixed(1)} kWh
                              </Typography>
                            </Grid>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Annual Energy Cost
                              </Typography>
                              <Typography variant="body1">
                                ₱{calculationResults.annualEnergyCost.toFixed(2)}
                              </Typography>
                            </Grid>
                          </Grid>
                          
                          <Divider sx={{ my: 2 }} />
                          
                          <Typography variant="subtitle2" gutterBottom>
                            Investment Analysis
                          </Typography>
                          <Grid container spacing={2}>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Initial Investment
                              </Typography>
                              <Typography variant="body1">
                                ₱{calculationResults.initialInvestment.toFixed(2)}
                              </Typography>
                            </Grid>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="body2" color="text.secondary">
                                Lamp Life
                              </Typography>
                              <Typography variant="body1">
                                {(calculationResults.lampType.lifeHours / 1000).toFixed(0)}k hours ({(calculationResults.lampType.lifeHours / (8 * 22 * 12)).toFixed(1)} years)
                              </Typography>
                            </Grid>
                          </Grid>
                          
                          {calculationResults.powerDensity > 10 && (
                            <Alert severity="warning" sx={{ mt: 2 }}>
                              Power density exceeds 10 W/m² recommended by DOE guidelines. Consider more efficient lighting options.
                            </Alert>
                          )}
                          
                          {calculationResults.averageIlluminance < calculationResults.requirement.requiredLux && (
                            <Alert severity="error" sx={{ mt: 2 }}>
                              The calculated illuminance is below the PEC required level. Consider adding more fixtures.
                            </Alert>
                          )}
                          
                          {calculationResults.averageIlluminance > calculationResults.requirement.requiredLux * 1.5 && (
                            <Alert severity="info" sx={{ mt: 2 }}>
                              The calculated illuminance significantly exceeds requirements. You may be able to reduce fixture count.
                            </Alert>
                          )}
                        </CardContent>
                      </Card>
                    </>
                  )}
                </Grid>
              </Grid>
            </>
          )}
        </Paper>
      </Modal>

      {/* Custom Lamp Dialog */}
      <Dialog
        open={showCustomLampDialog}
        onClose={() => setShowCustomLampDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Add Custom Lamp Type</DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                name="name"
                label="Lamp Name"
                value={newLampData.name}
                onChange={(e) => setNewLampData({...newLampData, name: e.target.value})}
                fullWidth
                required
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="wattage"
                label="Wattage (W)"
                type="number"
                value={newLampData.wattage}
                onChange={(e) => setNewLampData({...newLampData, wattage: Number(e.target.value)})}
                fullWidth
                InputProps={{ inputProps: { min: 1, step: 0.1 } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="lumens"
                label="Lumens (lm)"
                type="number"
                value={newLampData.lumens}
                onChange={(e) => setNewLampData({...newLampData, lumens: Number(e.target.value)})}
                fullWidth
                InputProps={{ inputProps: { min: 1, step: 1 } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="lifeHours"
                label="Life Hours"
                type="number"
                value={newLampData.lifeHours}
                onChange={(e) => setNewLampData({...newLampData, lifeHours: Number(e.target.value)})}
                fullWidth
                InputProps={{ inputProps: { min: 1000, step: 1000 } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="costPerUnit"
                label="Cost per Unit (₱)"
                type="number"
                value={newLampData.costPerUnit}
                onChange={(e) => setNewLampData({...newLampData, costPerUnit: Number(e.target.value)})}
                fullWidth
                InputProps={{ inputProps: { min: 1, step: 1 } }}
              />
            </Grid>
            <Grid item xs={12}>
              <Typography variant="body2" color="text.secondary">
                Calculated Efficacy: {newLampData.lumens / newLampData.wattage} lm/W
              </Typography>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowCustomLampDialog(false)}>Cancel</Button>
          <Button 
            onClick={handleAddCustomLamp}
            variant="contained" 
            color="primary"
            disabled={!newLampData.name || newLampData.wattage <= 0 || newLampData.lumens <= 0}
          >
            Add Lamp
          </Button>
        </DialogActions>
      </Dialog>

      {/* Hotspot Edit Dialog */}
      <Dialog
        open={showHotspotDialog}
        onClose={() => setShowHotspotDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          {selectedHotspot ? 'Edit Non-compliant Area' : 'Add Non-compliant Area'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                label="Title"
                value={newHotspotData.title || ''}
                onChange={(e) => setNewHotspotData({...newHotspotData, title: e.target.value})}
                fullWidth
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Description"
                value={newHotspotData.description || ''}
                onChange={(e) => setNewHotspotData({...newHotspotData, description: e.target.value})}
                fullWidth
                multiline
                rows={2}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Type</InputLabel>
                <Select
                  value={newHotspotData.type || 'lighting'}
                  label="Type"
                  onChange={(e) => setNewHotspotData({...newHotspotData, type: e.target.value as 'lighting' | 'power'})}
                >
                  <MenuItem value="lighting">Lighting</MenuItem>
                  <MenuItem value="power">Power</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                label="Compliance (%)"
                type="number"
                value={newHotspotData.compliance || 0}
                onChange={(e) => setNewHotspotData({...newHotspotData, compliance: Number(e.target.value)})}
                fullWidth
                InputProps={{ inputProps: { min: 0, max: 100, step: 0.1 } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                label="Width"
                type="number"
                value={newHotspotData.width || 100}
                onChange={(e) => setNewHotspotData({...newHotspotData, width: Number(e.target.value)})}
                fullWidth
                InputProps={{ inputProps: { min: 10, step: 1 } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                label="Height"
                type="number"
                value={newHotspotData.height || 80}
                onChange={(e) => setNewHotspotData({...newHotspotData, height: Number(e.target.value)})}
                fullWidth
                InputProps={{ inputProps: { min: 10, step: 1 } }}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowHotspotDialog(false)}>Cancel</Button>
          {selectedHotspot && (
            <Button 
              onClick={() => {
                handleDeleteHotspot(selectedHotspot.id);
                setShowHotspotDialog(false);
              }}
              color="error"
            >
              Delete
            </Button>
          )}
          <Button 
            onClick={handleSaveHotspot}
            variant="contained" 
            color="primary"
          >
            Save
          </Button>
        </DialogActions>
      </Dialog>

      {/* Updated Edit Menu with hotspot options */}
      <Menu
        anchorEl={editMenuAnchor}
        open={Boolean(editMenuAnchor)}
        onClose={() => {
          setEditMenuAnchor(null);
          setSelectedEditRoom(null);
          setSelectedHotspot(null);
        }}
      >
        {selectedEditRoom && (
          <>
            <MenuItem onClick={handleStartDrawing}>
              <ListItemIcon>
                <FormatShapes fontSize="small" />
              </ListItemIcon>
              <ListItemText>Draw Custom Shape</ListItemText>
            </MenuItem>
            <MenuItem onClick={() => {
              setShowColorPicker(true);
              setEditMenuAnchor(null);
            }}>
              <ListItemIcon>
                <ColorLens fontSize="small" />
              </ListItemIcon>
              <ListItemText>Change Color</ListItemText>
            </MenuItem>
            <MenuItem onClick={handleDeleteRoom}>
              <ListItemIcon>
                <Delete fontSize="small" color="error" />
              </ListItemIcon>
              <ListItemText>Delete Room</ListItemText>
            </MenuItem>
          </>
        )}
        
        {selectedHotspot && (
          <>
            <MenuItem onClick={() => {
              handleEditHotspot(selectedHotspot);
              setEditMenuAnchor(null);
            }}>
              <ListItemIcon>
                <Edit fontSize="small" />
              </ListItemIcon>
              <ListItemText>Edit Non-compliant Area</ListItemText>
            </MenuItem>
            <MenuItem onClick={() => {
              handleDeleteHotspot(selectedHotspot.id);
              setEditMenuAnchor(null);
            }}>
              <ListItemIcon>
                <Delete fontSize="small" color="error" />
              </ListItemIcon>
              <ListItemText>Delete Non-compliant Area</ListItemText>
            </MenuItem>
          </>
        )}
      </Menu>

      {/* Load Schedule Dialog */}
      <Dialog
        open={showLoadScheduleDialog}
        onClose={() => setShowLoadScheduleDialog(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>
          Load Schedule - {selectedLoadSchedule?.panelName}
          <IconButton
            aria-label="close"
            onClick={() => setShowLoadScheduleDialog(false)}
            sx={{
              position: 'absolute',
              right: 8,
              top: 8
            }}
          >
            <Close />
          </IconButton>
        </DialogTitle>
        <DialogContent>
          {selectedLoadSchedule && (
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Card variant="outlined" sx={{ mb: 2 }}>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>Panel Information</Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Panel Name"
                          value={selectedLoadSchedule.panelName}
                          onChange={(e) => {
                            if (selectedLoadSchedule) {
                              setSelectedLoadSchedule({
                                ...selectedLoadSchedule,
                                panelName: e.target.value
                              });
                            }
                          }}
                          size="small"
                          margin="dense"
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Voltage (V)"
                          type="number"
                          value={selectedLoadSchedule.voltage}
                          onChange={(e) => {
                            if (selectedLoadSchedule) {
                              setSelectedLoadSchedule({
                                ...selectedLoadSchedule,
                                voltage: Number(e.target.value)
                              });
                            }
                          }}
                          size="small"
                          margin="dense"
                          InputProps={{ inputProps: { min: 0 } }}
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Power Factor"
                          type="number"
                          value={selectedLoadSchedule.powerFactor}
                          onChange={(e) => {
                            if (selectedLoadSchedule) {
                              setSelectedLoadSchedule({
                                ...selectedLoadSchedule,
                                powerFactor: Number(e.target.value)
                              });
                            }
                          }}
                          size="small"
                          margin="dense"
                          InputProps={{ inputProps: { min: 0, max: 1, step: 0.01 } }}
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Circuit Breaker"
                          value={selectedLoadSchedule.circuitBreaker || ''}
                          onChange={(e) => {
                            if (selectedLoadSchedule) {
                              setSelectedLoadSchedule({
                                ...selectedLoadSchedule,
                                circuitBreaker: e.target.value
                              });
                            }
                          }}
                          size="small"
                          margin="dense"
                          placeholder="e.g., 100A"
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Conductor Size"
                          value={selectedLoadSchedule.conductorSize || ''}
                          onChange={(e) => {
                            if (selectedLoadSchedule) {
                              setSelectedLoadSchedule({
                                ...selectedLoadSchedule,
                                conductorSize: e.target.value
                              });
                            }
                          }}
                          size="small"
                          margin="dense"
                          placeholder="e.g., 30mm²"
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Incoming Feeder Size"
                          value={selectedLoadSchedule.incomingFeederSize || ''}
                          onChange={(e) => {
                            if (selectedLoadSchedule) {
                              setSelectedLoadSchedule({
                                ...selectedLoadSchedule,
                                incomingFeederSize: e.target.value
                              });
                            }
                          }}
                          size="small"
                          margin="dense"
                          placeholder="e.g., 50mm²"
                        />
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Feeder Protection Size"
                          value={selectedLoadSchedule.feederProtectionSize || ''}
                          onChange={(e) => {
                            if (selectedLoadSchedule) {
                              setSelectedLoadSchedule({
                                ...selectedLoadSchedule,
                                feederProtectionSize: e.target.value
                              });
                            }
                          }}
                          size="small"
                          margin="dense"
                          placeholder="e.g., 150A"
                        />
                      </Grid>
                    </Grid>
                  </CardContent>
                </Card>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Card variant="outlined" sx={{ mb: 2 }}>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>Load Summary</Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={12} sm={6}>
                        <Typography variant="body2" color="text.secondary">
                          Total Connected Load
                        </Typography>
                        <Typography variant="h6">
                          {selectedLoadSchedule.totalConnectedLoad.toFixed(0)} W
                        </Typography>
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <Typography variant="body2" color="text.secondary">
                          Total Demand Load
                        </Typography>
                        <Typography variant="h6">
                          {selectedLoadSchedule.totalDemandLoad.toFixed(0)} W
                        </Typography>
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <Typography variant="body2" color="text.secondary">
                          Current
                        </Typography>
                        <Typography variant="h6">
                          {selectedLoadSchedule.current.toFixed(2)} A
                        </Typography>
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <Typography variant="body2" color="text.secondary">
                          VA
                        </Typography>
                        <Typography variant="h6">
                          {(selectedLoadSchedule.totalDemandLoad / selectedLoadSchedule.powerFactor).toFixed(0)} VA
                        </Typography>
                      </Grid>
                    </Grid>
                    
                    <Divider sx={{ my: 2 }} />
                    
                    <Typography variant="body2" paragraph>
                      Based on PEC Article 2.10 calculations for demand factors and load calculations.
                    </Typography>
                    
                    <Alert severity="info" sx={{ mt: 2 }}>
                      <Typography variant="body2">
                        Make sure to properly size conductors and circuit breakers according to PEC requirements.
                      </Typography>
                    </Alert>
                  </CardContent>
                </Card>
              </Grid>
              
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom>Load Items</Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Description</TableCell>
                        <TableCell align="right">Quantity</TableCell>
                        <TableCell align="right">Rating (W)</TableCell>
                        <TableCell align="right">Demand Factor</TableCell>
                        <TableCell align="right">Connected Load (W)</TableCell>
                        <TableCell align="right">Demand Load (W)</TableCell>
                        <TableCell align="right">Circuit Breaker</TableCell>
                        <TableCell align="right">Conductor Size</TableCell>
                        <TableCell>Actions</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {selectedLoadSchedule.items.map((item, index) => (
                        <TableRow key={index}>
                          <TableCell>
                            <TextField
                              fullWidth
                              size="small"
                              value={item.description}
                              onChange={(e) => handleLoadItemChange(index, 'description', e.target.value)}
                            />
                          </TableCell>
                          <TableCell align="right">
                            <TextField
                              type="number"
                              size="small"
                              value={item.quantity}
                              onChange={(e) => handleLoadItemChange(index, 'quantity', Number(e.target.value))}
                              InputProps={{ inputProps: { min: 1, step: 1 } }}
                              sx={{ width: 70 }}
                            />
                          </TableCell>
                          <TableCell align="right">
                            <TextField
                              type="number"
                              size="small"
                              value={item.rating}
                              onChange={(e) => handleLoadItemChange(index, 'rating', Number(e.target.value))}
                              InputProps={{ inputProps: { min: 0 } }}
                              sx={{ width: 80 }}
                            />
                          </TableCell>
                          <TableCell align="right">
                            <TextField
                              type="number"
                              size="small"
                              value={item.demandFactor}
                              onChange={(e) => handleLoadItemChange(index, 'demandFactor', Number(e.target.value))}
                              InputProps={{ inputProps: { min: 0, max: 1, step: 0.1 } }}
                              sx={{ width: 70 }}
                            />
                          </TableCell>
                          <TableCell align="right">
                            {item.connectedLoad.toFixed(0)}
                          </TableCell>
                          <TableCell align="right">
                            {item.demandLoad.toFixed(0)}
                          </TableCell>
                          <TableCell align="right">
                            <TextField
                              size="small"
                              value={item.circuitBreaker || ''}
                              onChange={(e) => handleLoadItemChange(index, 'circuitBreaker', e.target.value)}
                              sx={{ width: 80 }}
                              placeholder="e.g., 20A"
                            />
                          </TableCell>
                          <TableCell align="right">
                            <TextField
                              size="small"
                              value={item.conductorSize || ''}
                              onChange={(e) => handleLoadItemChange(index, 'conductorSize', e.target.value)}
                              sx={{ width: 80 }}
                              placeholder="e.g., 3.5mm²"
                            />
                          </TableCell>
                          <TableCell>
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => {
                                if (selectedLoadSchedule) {
                                  const updatedItems = [...selectedLoadSchedule.items];
                                  updatedItems.splice(index, 1);
                                  setSelectedLoadSchedule({
                                    ...selectedLoadSchedule,
                                    items: updatedItems
                                  });
                                }
                              }}
                            >
                              <Delete fontSize="small" />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                
                <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between' }}>
                  <Button
                    variant="outlined"
                    startIcon={<Add />}
                    onClick={() => {
                      if (selectedLoadSchedule) {
                        const newItem: LoadItem = {
                          description: 'New Item',
                          quantity: 1,
                          rating: 100,
                          demandFactor: 1.0,
                          connectedLoad: 100,
                          demandLoad: 100,
                          circuitBreaker: '',
                          conductorSize: ''
                        };
                        setSelectedLoadSchedule({
                          ...selectedLoadSchedule,
                          items: [...selectedLoadSchedule.items, newItem]
                        });
                      }
                    }}
                  >
                    Add Load Item
                  </Button>
                  
                  <Button
                    variant="contained"
                    color="primary"
                    startIcon={<Save />}
                    onClick={handleSaveLoadSchedule}
                  >
                    Save Load Schedule
                  </Button>
                </Box>
              </Grid>
            </Grid>
          )}
        </DialogContent>
      </Dialog>
      
    </Box>
  );
};

export default BuildingVisualization;
